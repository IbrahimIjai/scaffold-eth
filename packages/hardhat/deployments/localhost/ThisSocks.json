{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBackgroundByTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBackgroundTypeByTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getColorsByTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "color1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "color2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "color3",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPinByTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "backgroundId",
          "type": "uint256"
        }
      ],
      "name": "setBackgroundByTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "backgroundType",
          "type": "uint256"
        }
      ],
      "name": "setBackgroundTypeByTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "color1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "color2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "color3",
          "type": "uint256"
        }
      ],
      "name": "setColorsByTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pinId",
          "type": "uint256"
        }
      ],
      "name": "setPinByTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa08f79bebc20ed23831ac005da7ab6b68e79ba58e5e066cadfe410a9ccd8e50",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "2670231",
    "logsBloom": "0x
    "blockHash": "0x89b79d36a358468395495fbb6de64ae6f765d2ccf3b0c00319fdd699720ed1e3",
    "transactionHash": "0xfa08f79bebc20ed23831ac005da7ab6b68e79ba58e5e066cadfe410a9ccd8e50",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 110,
        "transactionHash": "0xfa08f79bebc20ed23831ac005da7ab6b68e79ba58e5e066cadfe410a9ccd8e50",
        "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x89b79d36a358468395495fbb6de64ae6f765d2ccf3b0c00319fdd699720ed1e3"
      }
    ],
    "blockNumber": 110,
    "cumulativeGasUsed": "2670231",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "da6348f8bd2610997144571f4735f8a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBackgroundByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBackgroundTypeByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getColorsByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"color1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPinByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backgroundId\",\"type\":\"uint256\"}],\"name\":\"setBackgroundByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backgroundType\",\"type\":\"uint256\"}],\"name\":\"setBackgroundTypeByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color3\",\"type\":\"uint256\"}],\"name\":\"setColorsByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pinId\",\"type\":\"uint256\"}],\"name\":\"setPinByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ThisSocks.sol\":\"ThisSocks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/SockBackgroundLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary SockBackgroundLibrary {\\n     function GetBackgroundColor(uint256 colorInt) public pure returns(string memory){ \\n       string memory color ;\\n       if(colorInt == 0 ) {\\n            // WHITE\\n           color = \\\"#F5F5F5\\\";\\n       }\\n       else if (colorInt == 1) {\\n            // GRAY\\n            color = \\\"#DCDCDC\\\";\\n       }\\n       else if(colorInt == 2) {\\n          //Orange\\n          color =\\\"#FDB0B0\\\";\\n       } \\n       else if(colorInt == 3) {\\n         //Pink\\n         color = \\\"#FFD6F1\\\";\\n       }\\n       else if(colorInt == 4) {\\n         //YELLOW\\n         color = \\\"#FCDFB4\\\";\\n       }\\n       else if(colorInt == 5) {\\n         //BRIGHT YELLOW\\n         color = \\\"#FDFFBC\\\";\\n       }\\n       else if(colorInt == 6) {\\n         //Green\\n         color = \\\"#A5F7C6\\\";\\n       }\\n       else if(colorInt == 7) {\\n         //Blue\\n         color = \\\"#D6E4FF\\\";\\n       }\\n       else if(colorInt == 8) {\\n         //Dark Blue\\n         color = \\\"#A5BCF7\\\";\\n       }\\n       else if(colorInt == 9) {\\n         //Dark PinK\\n         color = \\\"#E8C2FF\\\";\\n       }\\n       else {\\n         // Black\\n         color =\\\"#282828\\\";\\n       }\\n      return color;\\n     }\\n\\n     function GetBackground(uint256 backgroundType,string memory backgroundColor) public pure returns(string memory){ \\n      // NATURAL WOOD\\n      if (backgroundType == 10) {\\n        return string(abi.encodePacked(\\n              '     <g clip-path=\\\"url(#clip0_104_1281)\\\">', \\n              '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#FCDFB4\\\"/>', \\n              '     <rect x=\\\"-24\\\" y=\\\"90\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <rect x=\\\"-297\\\" y=\\\"729\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <rect x=\\\"836\\\" y=\\\"730\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <rect x=\\\"289\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <rect x=\\\"-848\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <rect x=\\\"-24\\\" y=\\\"943\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <rect x=\\\"-21\\\" y=\\\"517\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     <circle cx=\\\"250.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"323.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"863.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"798.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"1059.5\\\" cy=\\\"115.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"250.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"323.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"863.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"798.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <circle cx=\\\"1059.5\\\" cy=\\\"270.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '     <rect x=\\\"-24\\\" y=\\\"-124\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '     </g>', \\n              '     <defs>', \\n              '     <clipPath id=\\\"clip0_104_1281\\\">', \\n              '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n              '     </clipPath>', \\n              '     </defs>'\\n        ));\\n     }\\n      else if (backgroundType == 15) {\\n        //Grey Wood\\n        return string(abi.encodePacked(\\n            '     <g clip-path=\\\"url(#clip0_104_1261)\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#818181\\\"/>', \\n            '     <rect x=\\\"-24\\\" y=\\\"90\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <rect x=\\\"-297\\\" y=\\\"729\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <rect x=\\\"836\\\" y=\\\"730\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <rect x=\\\"289\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <rect x=\\\"-848\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <rect x=\\\"-24\\\" y=\\\"943\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <rect x=\\\"-21\\\" y=\\\"517\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     <circle cx=\\\"250.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"323.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"863.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"798.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"1059.5\\\" cy=\\\"115.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"250.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"323.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"863.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"798.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <circle cx=\\\"1059.5\\\" cy=\\\"270.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '     <rect x=\\\"-13\\\" y=\\\"-123\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '     </g>', \\n            '     <defs>', \\n            '     <clipPath id=\\\"clip0_104_1261\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '     </clipPath>', \\n            '     </defs>'\\n        ));\\n     }\\n        else if (backgroundType == 20) {\\n        return string(abi.encodePacked(\\n          // Basic  Tile\\n            '     <g clip-path=\\\"url(#clip0_33_78)\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#DCDCDC\\\"/>', \\n            '     <rect x=\\\"106\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"1008\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"408\\\" y=\\\"99\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"-193\\\" y=\\\"99\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"711\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"110\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"106\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"1008\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"408\\\" y=\\\"408\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"-193\\\" y=\\\"408\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"711\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"110\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"106\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"106\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"-191\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"1008\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"1008\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"408\\\" y=\\\"717\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"408\\\" y=\\\"1020\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"408\\\" y=\\\"-211\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"-193\\\" y=\\\"717\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"711\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"711\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"1013\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"711\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"110\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"110\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     <rect x=\\\"-192\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '     </g>', \\n            '     <defs>', \\n            '     <clipPath id=\\\"clip0_33_78\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '     </clipPath>', \\n            '     </defs>'\\n        ));\\n     }\\n     else  if (backgroundType == 25) {\\n          // Cold Alps\\n      return string(abi.encodePacked(\\n            '     <g clip-path=\\\"url(#clip0_437_30)\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#98C1FF\\\"/>', \\n            '     <path d=\\\"M186.568 389.823L-83.4749 816.49C-95.3412 835.239 -89.7553 860.208 -69.2738 868.742C137.861 955.05 578.622 856.314 784.028 789.583C807.348 782.007 817.344 755.12 805.531 733.635L702.514 546.272C687.432 518.841 648.107 518.584 632.667 545.815L535.545 717.103C520.73 743.231 483.477 744.318 467.163 719.098L253.953 389.489C238.099 364.979 202.179 365.157 186.568 389.823Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M1018.24 333.751L1323.81 887.306C1333.61 905.067 1328.74 927.565 1310.75 936.945C1083.89 1055.25 578.474 923.349 353.972 838.119C332.571 829.994 323.302 805.317 333.2 784.676L455.434 529.776C469.854 499.707 512.575 499.448 527.357 529.34L638.867 754.83C653.108 783.628 693.774 784.734 709.561 756.753L948.386 333.427C963.772 306.155 1003.11 306.337 1018.24 333.751Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M497.986 423.351C478.812 434.63 480.771 449.198 488.76 455.073C478.715 491.73 515.723 488.809 530.87 482.767C546.922 504.922 568.399 491.998 577.131 482.767C615.923 493.643 634.239 468.836 635.725 455.073C642.859 434.529 618.19 425.365 607.786 423.351C591.734 388.305 564.312 408.748 552.607 423.351C529.421 388.305 506.532 408.748 497.986 423.351Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M407.194 800.613C263.129 695.274 54.2008 718.071 -21 751.972V1090H1081V688.101C979.754 688.101 934.1 763.109 923.929 800.613C862.401 714.141 767.358 680.24 610.286 688.101C484.629 694.39 422.535 765.729 407.194 800.613Z\\\" fill=\\\"white\\\" stroke=\\\"#98C1FF\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M722 935.5C724.4 913.1 752.333 920.5 766 927L783 962.5C761.667 962.833 719.6 957.9 722 935.5Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M783 1014C771.8 1010.8 783.667 992.667 791 978.5H803.5C801.333 995.333 794.2 1017.2 783 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M856 1014C846.4 1012.4 841.333 989.667 840 978.5L848.5 973.5C855 987.667 865.6 1015.6 856 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M297.864 953.731C294.541 922.96 255.864 933.126 236.942 942.055L213.404 990.821C242.942 991.279 301.187 984.503 297.864 953.731Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M213.404 1061.57C228.911 1057.17 212.481 1032.26 202.327 1012.8H185.019C188.019 1035.93 197.896 1065.96 213.404 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M112.329 1061.57C125.621 1059.37 132.636 1028.14 134.482 1012.8L122.713 1005.93C113.713 1025.39 99.0365 1063.77 112.329 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M773 919.5C755.8 930.7 765.833 945.167 773 951C763.989 987.4 788.912 984.5 802.5 978.5C816.9 1000.5 836.167 987.667 844 978.5C878.8 989.3 890.167 964.667 891.5 951C897.9 930.6 880.833 921.5 871.5 919.5C857.1 884.7 832.5 905 822 919.5C801.2 884.7 780.667 905 773 919.5Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M237.064 954.115C256.87 967.005 245.317 983.655 237.064 990.369C247.44 1032.26 218.742 1028.92 203.096 1022.02C186.514 1047.34 164.329 1032.57 155.309 1022.02C115.238 1034.45 102.149 1006.1 100.614 990.369C93.2443 966.89 112.896 956.417 123.643 954.115C140.225 914.063 168.551 937.426 180.642 954.115C204.593 914.063 228.236 937.426 237.064 954.115Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M370.064 73.1146C389.869 86.005 391.252 102.655 383 109.369C393.375 151.262 351.741 147.925 336.095 141.019C319.514 166.339 297.329 151.569 288.309 141.019C248.237 153.449 235.149 125.098 233.613 109.369C226.244 85.8899 245.896 75.4165 256.643 73.1146C273.224 33.0625 300.409 45.3114 312.5 61.9998C336.45 21.9476 361.236 56.4262 370.064 73.1146Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M871.066 976.964C872.666 962.175 891.296 967.06 900.41 971.352L911.748 994.79C897.52 995.01 869.465 991.753 871.066 976.964Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M911.748 1028.79C904.278 1026.68 912.193 1014.71 917.083 1005.35H925.42C923.975 1016.47 919.218 1030.9 911.748 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M960.433 1028.79C954.031 1027.74 950.652 1012.73 949.763 1005.35L955.431 1002.05C959.766 1011.41 966.836 1029.85 960.433 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M476.931 893.446C475.261 877.941 455.822 883.063 446.311 887.562L434.48 912.135C449.327 912.366 478.602 908.951 476.931 893.446Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M434.48 947.782C442.275 945.567 434.016 933.016 428.913 923.21H420.214C421.722 934.861 426.686 949.997 434.48 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M383.678 947.782C390.359 946.675 393.885 930.939 394.813 923.21L388.898 919.749C384.374 929.555 376.997 948.89 383.678 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M896.367 137.989C881.214 128.073 890.053 115.265 896.367 110.101C888.428 77.8749 910.385 80.4424 922.356 85.7544C935.043 66.2772 952.017 77.6389 958.918 85.7544C989.577 76.1928 999.825 98.0014 1001 110.101C1006.64 128.161 991.368 136.218 983.145 137.989C970.459 168.798 953.75 150.826 944.5 137.989C926.175 168.798 903.121 150.826 896.367 137.989Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M63.9449 274.845C53.1781 281.166 59.4587 289.331 63.9449 292.623C58.3043 313.167 73.9055 311.53 82.4111 308.144C91.4251 320.561 103.486 313.318 108.389 308.144C130.173 314.24 137.288 300.337 138.123 292.623C142.129 281.11 131.446 275.974 125.603 274.845C116.589 255.204 101.19 266.661 94.6176 274.845C81.5974 255.204 68.744 266.661 63.9449 274.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M950.945 460.845C940.178 467.166 946.459 475.331 950.945 478.623C945.304 499.167 960.905 497.53 969.411 494.144C978.425 506.561 990.486 499.318 995.389 494.144C1017.17 500.24 1024.29 486.337 1025.12 478.623C1029.13 467.11 1018.45 461.974 1012.6 460.845C1003.59 441.204 988.19 452.661 981.618 460.845C968.597 441.204 955.744 452.661 950.945 460.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M445.862 893.42C455.167 899.493 449.739 907.338 445.862 910.501C450.737 930.239 437.255 928.667 429.904 925.413C422.114 937.343 411.692 930.384 407.454 925.413C388.628 931.269 382.479 917.912 381.758 910.501C378.296 899.439 387.528 894.504 392.577 893.42C400.367 874.549 413.675 885.557 419.355 893.42C430.607 874.549 441.715 885.557 445.862 893.42Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M957.862 976.42C967.167 982.493 961.739 990.338 957.862 993.501C962.737 1013.24 949.255 1011.67 941.904 1008.41C934.114 1020.34 923.692 1013.38 919.454 1008.41C900.628 1014.27 894.479 1000.91 893.758 993.501C890.296 982.439 899.528 977.504 904.577 976.42C912.367 957.549 925.675 968.557 931.355 976.42C942.607 957.549 953.715 968.557 957.862 976.42Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     </g>', \\n            '     <defs>', \\n            '     <clipPath id=\\\"clip0_437_30\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '     </clipPath>', \\n            '     </defs>'\\n      ));\\n     }\\n     else if(backgroundType == 30 ){\\n       // Alps\\n      return  string(abi.encodePacked(            \\n            '     <g clip-path=\\\"url(#clip0_33_53)\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#98C1FF\\\"/>', \\n            '     <path d=\\\"M186.568 389.823L-83.4749 816.49C-95.3412 835.239 -89.7553 860.208 -69.2738 868.742C137.861 955.05 578.622 856.314 784.028 789.583C807.348 782.007 817.344 755.12 805.531 733.635L702.514 546.272C687.432 518.841 648.107 518.584 632.667 545.815L535.545 717.103C520.73 743.231 483.477 744.318 467.163 719.098L253.953 389.489C238.099 364.979 202.179 365.157 186.568 389.823Z\\\" fill=\\\"#70AE3F\\\"/>', \\n            '     <path d=\\\"M1018.24 333.751L1323.81 887.306C1333.61 905.067 1328.74 927.565 1310.75 936.945C1083.89 1055.25 578.474 923.349 353.972 838.119C332.571 829.994 323.302 805.317 333.2 784.676L455.434 529.776C469.854 499.707 512.575 499.448 527.357 529.34L638.867 754.83C653.108 783.628 693.774 784.734 709.561 756.753L948.386 333.427C963.772 306.155 1003.11 306.337 1018.24 333.751Z\\\" fill=\\\"#70AE3F\\\"/>', \\n            '     <path d=\\\"M497.986 423.351C478.812 434.63 480.771 449.198 488.76 455.073C478.715 491.73 515.723 488.809 530.87 482.767C546.922 504.922 568.399 491.998 577.131 482.767C615.923 493.643 634.239 468.836 635.725 455.073C642.859 434.529 618.19 425.365 607.786 423.351C591.734 388.305 564.312 408.748 552.607 423.351C529.421 388.305 506.532 408.748 497.986 423.351Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M407.194 800.613C263.129 695.274 54.2008 718.071 -21 751.972V1090H1081V688.101C979.754 688.101 934.1 763.109 923.929 800.613C862.401 714.141 767.358 680.24 610.286 688.101C484.629 694.39 422.535 765.729 407.194 800.613Z\\\" fill=\\\"#387607\\\"/>', \\n            '     <path d=\\\"M722 935.5C724.4 913.1 752.333 920.5 766 927L783 962.5C761.667 962.833 719.6 957.9 722 935.5Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M783 1014C771.8 1010.8 783.667 992.667 791 978.5H803.5C801.333 995.333 794.2 1017.2 783 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M856 1014C846.4 1012.4 841.333 989.667 840 978.5L848.5 973.5C855 987.667 865.6 1015.6 856 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M297.864 953.731C294.541 922.96 255.864 933.126 236.942 942.055L213.404 990.821C242.942 991.279 301.187 984.503 297.864 953.731Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M213.404 1061.57C228.911 1057.17 212.481 1032.26 202.327 1012.8H185.019C188.019 1035.93 197.896 1065.96 213.404 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M112.329 1061.57C125.621 1059.37 132.636 1028.14 134.482 1012.8L122.713 1005.93C113.713 1025.39 99.0365 1063.77 112.329 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M773 919.5C755.8 930.7 765.833 945.167 773 951C763.989 987.4 788.912 984.5 802.5 978.5C816.9 1000.5 836.167 987.667 844 978.5C878.8 989.3 890.167 964.667 891.5 951C897.9 930.6 880.833 921.5 871.5 919.5C857.1 884.7 832.5 905 822 919.5C801.2 884.7 780.667 905 773 919.5Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M237.064 954.115C256.87 967.005 245.317 983.655 237.064 990.369C247.44 1032.26 218.742 1028.92 203.096 1022.02C186.514 1047.34 164.329 1032.57 155.309 1022.02C115.238 1034.45 102.149 1006.1 100.614 990.369C93.2443 966.89 112.896 956.417 123.643 954.115C140.225 914.063 168.551 937.426 180.642 954.115C204.593 914.063 228.236 937.426 237.064 954.115Z\\\" fill=\\\"white\\\" stroke=\\\"white\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M370.064 73.1149C389.869 86.0052 391.252 102.655 383 109.369C393.375 151.263 351.741 147.925 336.095 141.019C319.514 166.34 297.329 151.569 288.309 141.019C248.237 153.449 235.149 125.098 233.613 109.369C226.244 85.8902 245.896 75.4167 256.643 73.1149C273.224 33.0627 300.409 45.3116 312.5 62C336.45 21.9479 361.236 56.4265 370.064 73.1149Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M871.066 976.964C872.666 962.175 891.296 967.06 900.41 971.352L911.748 994.79C897.52 995.01 869.465 991.753 871.066 976.964Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M911.748 1028.79C904.278 1026.68 912.193 1014.71 917.083 1005.35H925.42C923.975 1016.47 919.218 1030.9 911.748 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M960.433 1028.79C954.031 1027.74 950.652 1012.73 949.763 1005.35L955.431 1002.05C959.766 1011.41 966.836 1029.85 960.433 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M476.931 893.446C475.261 877.941 455.822 883.063 446.311 887.562L434.48 912.135C449.327 912.366 478.602 908.951 476.931 893.446Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M434.48 947.782C442.275 945.567 434.016 933.016 428.913 923.21H420.214C421.722 934.861 426.686 949.997 434.48 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M383.678 947.782C390.359 946.675 393.885 930.939 394.813 923.21L388.898 919.749C384.374 929.555 376.997 948.89 383.678 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M896.367 137.989C881.214 128.073 890.053 115.265 896.367 110.101C888.428 77.8749 910.385 80.4424 922.356 85.7544C935.043 66.2772 952.017 77.6389 958.918 85.7544C989.577 76.1928 999.825 98.0014 1001 110.101C1006.64 128.161 991.368 136.218 983.145 137.989C970.459 168.798 953.75 150.826 944.5 137.989C926.175 168.798 903.121 150.826 896.367 137.989Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M63.9449 274.845C53.1781 281.166 59.4587 289.331 63.9449 292.623C58.3043 313.167 73.9055 311.53 82.4111 308.144C91.4251 320.561 103.486 313.318 108.389 308.144C130.173 314.24 137.288 300.337 138.123 292.623C142.129 281.11 131.446 275.974 125.603 274.845C116.589 255.204 101.19 266.661 94.6176 274.845C81.5974 255.204 68.744 266.661 63.9449 274.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M950.945 460.845C940.178 467.166 946.459 475.331 950.945 478.623C945.304 499.167 960.905 497.53 969.411 494.144C978.425 506.561 990.486 499.318 995.389 494.144C1017.17 500.24 1024.29 486.337 1025.12 478.623C1029.13 467.11 1018.45 461.974 1012.6 460.845C1003.59 441.204 988.19 452.661 981.618 460.845C968.597 441.204 955.744 452.661 950.945 460.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M445.862 893.42C455.167 899.493 449.739 907.338 445.862 910.501C450.737 930.239 437.255 928.667 429.904 925.413C422.114 937.343 411.692 930.384 407.454 925.413C388.628 931.269 382.479 917.912 381.758 910.501C378.296 899.439 387.528 894.504 392.577 893.42C400.367 874.549 413.675 885.557 419.355 893.42C430.607 874.549 441.715 885.557 445.862 893.42Z\\\" fill=\\\"white\\\" stroke=\\\"white\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M957.862 976.42C967.167 982.493 961.739 990.338 957.862 993.501C962.737 1013.24 949.255 1011.67 941.904 1008.41C934.114 1020.34 923.692 1013.38 919.454 1008.41C900.628 1014.27 894.479 1000.91 893.758 993.501C890.296 982.439 899.528 977.504 904.577 976.42C912.367 957.549 925.675 968.557 931.355 976.42C942.607 957.549 953.715 968.557 957.862 976.42Z\\\" fill=\\\"white\\\" stroke=\\\"white\\\" stroke-width=\\\"8\\\"/>', \\n            '     </g>', \\n            '     <defs>', \\n            '     <clipPath id=\\\"clip0_33_53\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '     </clipPath>', \\n            '     </defs>'));\\n     }\\n      else {\\n        return  string(abi.encodePacked(\\n          // Plane\\n          '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n          ' fill=\\\"',backgroundColor,'\\\"',\\n          ' />'\\n          ));\\n     } \\n     }\\n    \\n    function BackClip(uint256 backgroundType)  public pure returns(string memory){\\n         if (backgroundType == 25 || backgroundType == 30){\\n           return  string(abi.encodePacked(\\n            '     <path class=\\\"backClip\\\" transform=\\\"translate(-190, -10)\\\"', \\n            '         d=\\\"M761.642 191.423L784.803 24.2317L858.721 20.7567L805.328 204.142L761.642 191.423Z\\\" fill=\\\"#FDA2F4\\\" stroke=\\\"black\\\"', \\n            '         stroke-width=\\\"8\\\" />'\\n            ));\\n         }\\n         return \\\"\\\";\\n    }\\n\\n    function FrontClip(uint256 backgroundType)  public pure returns(string memory){\\n          if (backgroundType == 25 || backgroundType == 30){\\n            return string(abi.encodePacked(\\n                '     <g transform=\\\"translate(-2, 120)\\\">', \\n                '         <path d=\\\"M2 39.0845C228.167 107.918 761.8 212.984 1087 82.5845\\\" fill-opacity=\\\"0\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n                '         <path d=\\\"M746.993 192.52L747.585 23.7335L820.375 10.4036L791.988 199.282L746.993 192.52Z\\\" fill=\\\"#FDA2F4\\\"', \\n                '             stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n                '     </g>'\\n            ));\\n          }\\n         return \\\"\\\";\\n    }\\n} \",\"keccak256\":\"0xfcac3224f667330c4119d083780197e7cf5e2c21c3bb8e647cf498342582677f\",\"license\":\"MIT\"},\"contracts/SockLayoutLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\n\\nlibrary SockLayoutLibrary {\\n    function GetColor(uint256 colorInt) public pure returns(string memory){ \\n       string memory color ; \\n       if(colorInt == 0 ) {\\n            // RED\\n           color = \\\"#EB4545\\\";\\n       }\\n       else if (colorInt == 1) {\\n            // Pink\\n            color = \\\"#FDA2F4\\\";\\n       }\\n       else if(colorInt == 2) {\\n          //Orange\\n          color =\\\"#FF8A01\\\";\\n       } \\n       else if(colorInt == 3) {\\n         //Yellow\\n         color = \\\"#FDED5E\\\";\\n       }\\n       else if(colorInt == 4) {\\n         //Green\\n         color = \\\"#B4E847\\\";\\n       }\\n       else if(colorInt == 5) {\\n         //Dark Green\\n         color = \\\"#70AE3F\\\";\\n       }\\n       else if(colorInt == 6) {\\n         //Blue\\n         color = \\\"#98C1FF\\\";\\n       }\\n       else if(colorInt == 7) {\\n         //Dark Blue\\n         color = \\\"#3E3BD3\\\";\\n       }\\n       else if(colorInt == 8) {\\n         //Purple\\n         color = \\\"#CF81FF\\\";\\n       }\\n       else if(colorInt == 9) {\\n         //Gray\\n         color = \\\"#D9D9D9\\\";\\n       }\\n       else if(colorInt == 10) {\\n         //White\\n         color = \\\"#FFFFFF\\\";\\n       }\\n       else {\\n         // Black\\n         color =\\\"#000000\\\";\\n       }\\n      return color;\\n     }\\n\\n    function GetLayout(string memory towAndHeelColor , string memory cuffColor, string memory color) public pure returns(string memory){\\n      string memory sockLayout;\\n      sockLayout =  string(abi.encodePacked(\\n            '<g transform=\\\"translate(-140 -100)\\\">', \\n            '   <path', \\n            '        d=\\\"M785.9 275.626C725.097 247.898 669.212 239.882 661.077 257.721L611.495 366.449C635.241 404.755 712.524 478.465 831.681 466.859L881.263 358.13C889.398 340.292 846.702 303.353 785.9 275.626Z\\\"', \\n            '     ', \\n            '   fill=\\\"', cuffColor, '\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n      ));\\n       sockLayout = string(abi.encodePacked(\\n             sockLayout,\\n            '    ', \\n            '  <path', \\n            '      d=\\\"M881.497 358.237C873.362 376.076 817.477 368.06 756.674 340.332C695.871 312.605 653.176 275.666 661.311 257.827C669.445 239.989 725.33 248.005 786.133 275.732C846.936 303.46 889.632 340.398 881.497 358.237Z\\\"', \\n            '            fill=\\\"black\\\" />', \\n            '  <path', \\n            '      d=\\\"M168.509 667.263C175.832 606.857 230.421 582.109 256.8 577.286C290.206 612.486 334.446 699.85 244.153 767.703C232.038 760.529 159.354 742.771 168.509 667.263Z\\\"', \\n            '     ', \\n            ' fill=\\\"',towAndHeelColor,'\\\"  stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n            '     '\\n            ));\\n         sockLayout = string(abi.encodePacked(\\n            sockLayout,\\n            ' <path', \\n            '   d=\\\"M604.34 791.275C737.081 797.037 736.069 677.143 736.069 677.143C698.338 671.111 619.168 685.492 604.34 791.275Z\\\"', \\n            '   fill=\\\"', towAndHeelColor,'\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            ' <path', \\n            '    d=\\\"M256.592 577.74L474.708 564.611C504.256 562.832 530.407 544.882 542.689 517.949L611.728 366.555C635.475 404.861 712.757 478.571 831.914 466.965L735.861 677.597C698.13 671.565 618.96 685.946 604.133 791.729C471.392 785.967 253.638 773.896 243.946 768.157C334.238 700.305 289.999 612.941 256.592 577.74Z\\\"', \\n            ' fill=\\\"',color ,'\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" /> ', \\n            '</g>'\\n      ));\\n      return sockLayout;\\n    }\\n}\\n\",\"keccak256\":\"0x120ba1173a6f58af8b1838c4048063fa871879c01a682e4f0b50d7a3a9dcb76f\",\"license\":\"MIT\"},\"contracts/SockPinLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\nlibrary SockPinLibrary {\\n\\n\\n    function GetPin(uint256 currentPin) public pure returns(string memory){\\n      if (currentPin == 0) {\\n        return  string(abi.encodePacked( \\n               '<g transform=\\\"translate(590, 254)\\\">',\\n               '<path',\\n               '    d=\\\"M88.8426 20.2693L59.0795 4.9411L21.0086 40.9829L33.9179 47.6312L3.15136 80.9425L68.0041 46.6364L54.7363 39.8033L88.8426 20.2693Z\\\" fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>'\\n               '</g>'\\n          ));\\n      }\\n      else if (currentPin == 1) {\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(590, 250)\\\">',\\n            '     <path d=\\\"M29.7081 93.5393C40.2096 98.6588 52.7676 95.2633 63.0806 89.1762C73.5261 83.0109 82.9144 73.3983 87.5508 63.8877C96.9893 44.5267 88.9456 21.1801 69.5846 11.7416C50.2236 2.30309 26.877 10.3469 17.4385 29.7079C12.8021 39.2185 11.0122 52.5353 12.5893 64.5616C14.1464 76.4354 19.2067 88.4199 29.7081 93.5393Z\\\" fill=\\\"#B4E847\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <ellipse cx=\\\"37.7803\\\" cy=\\\"43.6872\\\" rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"rotate(74.2525 37.7803 43.6872)\\\" fill=\\\"black\\\"/>', \\n            '     <ellipse rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"matrix(-0.925382 0.379036 0.379036 0.925382 64.7465 56.8328)\\\" fill=\\\"black\\\"/>', \\n            '     <circle cx=\\\"38.1128\\\" cy=\\\"39.7865\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 38.1128 39.7865)\\\" fill=\\\"#D9D9D9\\\"/>', \\n            '     <circle cx=\\\"63.2807\\\" cy=\\\"52.056\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 63.2807 52.056)\\\" fill=\\\"#D9D9D9\\\"/>', \\n            '     <circle cx=\\\"41.1855\\\" cy=\\\"65.1851\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 41.1855 65.1851)\\\" fill=\\\"black\\\"/>', \\n            '     <circle cx=\\\"46.7598\\\" cy=\\\"66.8951\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 46.7598 66.8951)\\\" fill=\\\"black\\\"/>', \\n            '</g>'\\n        ));\\n      }\\n      else if (currentPin == 2) {\\n        // Alien\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(590, 250)\\\">',\\n            '<path ',\\n            '   d=\\\"M29.7081 93.5393C40.2096 98.6588 52.7676 95.2633 63.0806 89.1762C73.5261 83.0109 82.9144 73.3983 87.5508 63.8877C96.9893 44.5267 88.9456 21.1801 69.5846 11.7416C50.2236 2.30309 26.877 10.3469 17.4385 29.7079C12.8021 39.2185 11.0122 52.5353 12.5893 64.5616C14.1464 76.4354 19.2067 88.4199 29.7081 93.5393Z\\\"'\\n            '   fill=\\\"#B4E847\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"',\\n            '/>',\\n            '<ellipse cx=\\\"37.7803\\\" cy=\\\"43.6872\\\" rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"rotate(74.2525 37.7803 43.6872)\\\" fill=\\\"black\\\" />',\\n            '<ellipse rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"matrix(-0.925382 0.379036 0.379036 0.925382 64.7465 56.8328)\\\" fill=\\\"black\\\" />',\\n            '<circle cx=\\\"38.1128\\\" cy=\\\"39.7865\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 38.1128 39.7865)\\\" fill=\\\"#D9D9D9\\\" />',\\n            '<circle cx=\\\"63.2807\\\" cy=\\\"52.056\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 63.2807 52.056)\\\" fill=\\\"#D9D9D9\\\" />',\\n            '<circle cx=\\\"41.1855\\\" cy=\\\"65.1851\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 41.1855 65.1851)\\\" fill=\\\"black\\\" />',\\n            '<circle cx=\\\"46.7598\\\" cy=\\\"66.8951\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 46.7598 66.8951)\\\" fill=\\\"black\\\" />',\\n            '</g>'\\n        ));\\n      }\\n      else if(currentPin == 3) {\\n          // Cloud\\n            return  string(abi.encodePacked(\\n                '<g transform=\\\"translate(560, 260)\\\">',\\n                '   <path d=\\\"M106.728 33.9123L105.181 37.7282L109.04 39.1645C118.923 42.8428 124.987 53.4045 122.786 64.2925C120.351 76.3417 108.76 84.0783 96.9789 81.6971L22.4197 66.6271C10.6385 64.2458 2.9622 52.6148 5.39763 40.5656C7.83305 28.5163 19.424 20.7797 31.2052 23.1609L31.2081 23.1615L35.069 23.9419L35.9086 20.0934C38.1898 9.63692 48.3175 2.96989 58.5999 5.04822C63.2088 5.97977 67.0906 8.50443 69.8108 11.9603L72.5348 15.4209L75.7181 12.3775C80.1475 8.14282 86.4306 6.09598 92.7866 7.38067C103.169 9.47916 109.943 19.7325 107.794 30.3647C107.544 31.604 107.184 32.7888 106.728 33.9123Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n                '</g>'\\n            ));\\n      }\\n      else if(currentPin == 4){\\n          // Heart\\n         return string(abi.encodePacked(\\n            '<g transform=\\\"translate(560, 240)\\\">',\\n            '  <path d=\\\"M96.5897 50.9757C100.864 37.753 93.8077 23.9809 80.9685 19.8308C70.6011 16.4796 59.5213 20.7899 53.3964 29.4733C53.5101 18.8482 46.9696 9.1155 36.6021 5.76429C23.7604 1.61331 10.0841 8.35624 5.80832 21.5839C3.65086 28.2584 4.78503 33.8332 7.43234 40.2624L33.084 92.3863L84.3475 65.1246C90.2609 61.4626 94.4339 57.6451 96.5897 50.9757Z\\\" fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n            '</g>'\\n         ));\\n      }\\n\\n      else if(currentPin == 5) {\\n         //Flower\\n         return string(abi.encodePacked(\\n            '<g transform=\\\"translate(560, 230)\\\">',\\n            '<path d=\\\"M62.2247 103.528C61.4863 102.507 60.8336 101.367 60.2579 100.151C59.6921 101.363 59.0444 102.502 58.3024 103.527L58.3023 103.528C50.8756 113.79 36.5564 116.072 26.3249 108.609C16.1029 101.152 13.844 86.8002 21.2636 76.547C21.9876 75.5465 22.8642 74.6178 23.8436 73.7575C22.4994 73.5423 21.2218 73.2468 20.0405 72.8614C8.01247 68.9376 1.45168 55.9809 5.35008 43.9344L5.35009 43.9344C9.25076 31.8814 22.1584 25.2633 34.1935 29.1894C35.3873 29.5789 36.5933 30.1385 37.7894 30.8211C37.5085 29.5113 37.3472 28.2145 37.3472 26.9613C37.3472 14.2952 47.5782 3.99993 60.2327 3.99993C72.8873 3.99993 83.1183 14.2952 83.1183 26.9613C83.1183 28.2074 82.9587 29.4966 82.6808 30.7988C83.8638 30.1305 85.0628 29.5797 86.2591 29.1894L87.4997 32.9922L86.2592 29.1894C98.2945 25.2633 111.202 31.8814 115.103 43.9344L111.297 45.166L115.103 43.9344C119.001 55.9809 112.44 68.9376 100.412 72.8614C99.2488 73.241 97.9938 73.5036 96.6869 73.6729C97.658 74.5767 98.5312 75.5357 99.263 76.5471C106.683 86.8002 104.424 101.152 94.2019 108.609C83.9703 116.072 69.6511 113.791 62.2247 103.528ZM62.2247 103.528L65.4652 101.183L62.2247 103.528ZM61.5772 63.466C61.3499 63.5924 61.1267 63.7313 60.9092 63.8838L60.7404 63.7807C60.2416 63.4761 59.7047 63.2599 59.1698 63.1057C59.4242 62.3455 59.5425 61.5768 59.5744 60.8416C59.7847 60.869 60.0046 60.8849 60.2327 60.8849C60.5827 60.8849 60.9134 60.8476 61.2193 60.7884C61.2171 61.6984 61.3246 62.5988 61.5772 63.466Z\\\"',\\n            ' fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n            '<circle cx=\\\"59.7266\\\" cy=\\\"62.5\\\" r=\\\"23.5\\\" fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n            '</g>'));\\n      }\\n      else if(currentPin == 6){\\n        // Star\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(590, 250)\\\">',\\n            '   <path d=\\\"M46.2266 7.94755L58.2876 28.6551L59.1748 30.1783L60.8975 30.5513L84.3187 35.6231L68.3517 53.4929L67.1772 54.8073L67.3548 56.561L69.7688 80.4031L47.8396 70.7396L46.2266 70.0288L44.6136 70.7396L22.6843 80.4031L25.0983 56.561L25.2759 54.8073L24.1014 53.4929L8.13442 35.6231L31.5556 30.5513L33.2783 30.1783L34.1655 28.6551L46.2266 7.94755Z\\\" fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n            '</g>'));\\n      }\\n      else if(currentPin == 7){\\n        //Skull\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(570, 250)\\\">',\\n            '     <path d=\\\"M58.0915 93.8046C60.0253 94.3978 61.9696 94.8376 63.9114 95.1308M63.9114 95.1308C83.2387 98.049 102.311 86.4477 108.222 67.1817C114.726 45.9802 102.827 23.5251 81.645 17.027C80.4816 16.6701 63.973 11.6624 62.8048 11.4151C42.7042 7.15984 22.3203 18.9064 16.1734 38.9435C11.9616 52.6727 15.4667 66.9276 24.2124 77.0348L18.4818 88.1507C20.775 90.5559 24.4587 93.6654 29.1343 96.5428M63.9114 95.1308L63.9854 103.967C56.9801 105.389 50.205 104.793 44.0582 103.114M29.1343 96.5428L32.3929 85.9209M29.1343 96.5428C33.3881 99.1607 38.4628 101.586 44.0582 103.114M44.0582 103.114L47.225 92.7915\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" fill=\\\"#FDFFBC\\\"/>', \\n            '     <path d=\\\"M60.3543 48.4399C56.8607 56.8824 59.7427 65.2297 65.6042 67.6553C71.4657 70.0809 79.4034 66.2108 82.897 57.7683C86.3907 49.3258 83.5086 40.9784 77.6471 38.5529C71.7856 36.1273 63.8479 39.9973 60.3543 48.4399Z\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" fill=\\\"#FDFFBC\\\"/>', \\n            '     <path d=\\\"M31.2449 36.394C27.7513 44.8365 30.6333 53.1838 36.4948 55.6094C42.3563 58.035 50.294 54.1649 53.7877 45.7224C57.2813 37.2799 54.3993 28.9325 48.5377 26.507C42.6762 24.0814 34.7385 27.9514 31.2449 36.394Z\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" fill=\\\"#FDFFBC\\\"/>', \\n            '     <path d=\\\"M83.9143 58.2674C80.7069 66.0181 74.2227 70.694 69.4313 68.7113C65.6343 67.14 64.0399 61.8587 65.1379 55.8769L71.7808 56.5338L66.5632 51.0873C69.7705 43.3365 76.2548 38.6606 81.0461 40.6434C85.8375 42.6261 87.1216 50.5166 83.9143 58.2674Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M54.5725 45.0506C51.3651 52.8013 44.8809 57.4772 40.0895 55.4945C36.2925 53.9232 34.6981 48.6419 35.7961 42.6601L42.439 43.317L37.2214 37.8705C40.4287 30.1197 46.913 25.4438 51.7043 27.4266C56.4957 29.4093 57.7798 37.2998 54.5725 45.0506Z\\\" fill=\\\"black\\\"/>', \\n            '     <circle cx=\\\"42.2129\\\" cy=\\\"68.2806\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 42.2129 68.2806)\\\" fill=\\\"black\\\"/>', \\n            '     <circle cx=\\\"48.5762\\\" cy=\\\"70.2327\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 48.5762 70.2327)\\\" fill=\\\"black\\\"/>', \\n            '</g>'\\n        ));\\n      }\\n      else if(currentPin == 8){\\n        // Frog\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(560, 240)\\\">',\\n          '     <path d=\\\"M45.9289 5.26326C34.7615 1.75155 22.887 8.0221 19.3715 19.2015C18.0339 23.4553 18.0963 27.8206 19.2999 31.7857C11.2235 38.9004 3.1217 50.3726 5.11448 63.355C7.33421 77.816 21.5963 91.4101 54.6278 101.651C87.5688 112.153 107.021 109.145 117.087 98.5219C126.12 88.9894 126.009 74.9214 123.453 64.4665C126.678 61.9079 129.203 58.3825 130.532 54.1569C134.047 42.9775 127.899 31.0394 116.731 27.5277C107.378 24.5864 97.5281 28.5076 92.5096 36.4279C81.1808 28.4047 68.828 26.3004 60.7012 26.3393C61.0799 17.0037 55.2542 8.19568 45.9289 5.26326Z\\\" fill=\\\"#B4E847\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <path d=\\\"M24.8808 52.2439C21.2469 59.9578 22.1528 74.9755 56.3831 86.3972C99.8373 100.897 102.614 82.9118 106.565 79.5029\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" stroke-linecap=\\\"round\\\"/>', \\n          '     <circle cx=\\\"39.3517\\\" cy=\\\"26.2306\\\" r=\\\"10.048\\\" transform=\\\"rotate(6.3946 39.3517 26.2306)\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <circle cx=\\\"110.136\\\" cy=\\\"47.6446\\\" r=\\\"10.048\\\" transform=\\\"rotate(6.3946 110.136 47.6446)\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '</g>'\\n        ));\\n      }\\n      else if(currentPin == 9) {\\n        // Bear\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(572, 240)\\\">',\\n          '     <path d=\\\"M78.1321 35.5307C76.9687 35.1738 60.4601 30.166 59.2919 29.9187L60.399 22.464C60.399 13.0751 52.7879 5.46399 43.399 5.46399C34.0102 5.46399 26.399 13.0752 26.399 22.464C26.399 27.069 28.23 31.2463 31.2037 34.3077C22.6098 39.1935 15.79 47.2459 12.6605 57.4471C8.4487 71.1764 11.9538 85.4313 20.6995 95.5384C26.0863 100.686 40.4036 111.247 54.5785 112.308C56.5124 112.901 58.4567 113.341 60.3985 113.634C79.7258 116.553 98.7984 104.951 104.709 85.6854C106.977 78.2901 107.007 70.7422 105.185 63.7723C105.923 63.8703 106.677 63.9209 107.443 63.9209C116.832 63.9209 124.443 56.3097 124.443 46.9209C124.443 37.5321 116.832 29.9209 107.443 29.9209C99.6643 29.9209 93.1061 35.1449 91.0851 42.2758C87.3242 39.3317 82.9703 37.0149 78.1321 35.5307Z\\\" fill=\\\"#FDA2F4\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <path d=\\\"M56.8406 66.9428C53.347 75.3853 56.229 83.7327 62.0905 86.1582C67.952 88.5838 75.8897 84.7138 79.3834 76.2712C82.877 67.8287 79.995 59.4813 74.1335 57.0558C68.272 54.6302 60.3342 58.5002 56.8406 66.9428Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M27.7322 54.8979C24.2386 63.3404 27.1206 71.6877 32.9821 74.1133C38.8436 76.5389 46.7813 72.6689 50.275 64.2263C53.7686 55.7838 50.8866 47.4364 45.0251 45.0109C39.1636 42.5853 31.2258 46.4553 27.7322 54.8979Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M80.4016 76.7713C77.1942 84.522 70.71 89.1979 65.9186 87.2152C62.1216 85.6439 60.5272 80.3626 61.6252 74.3808L68.2681 75.0377L63.0505 69.5912C66.2578 61.8404 72.7421 57.1645 77.5334 59.1473C82.3248 61.13 83.6089 69.0205 80.4016 76.7713Z\\\" fill=\\\"black\\\"/>', \\n          '     <path d=\\\"M51.0598 63.5545C47.8524 71.3052 41.3682 75.9811 36.5768 73.9984C32.7798 72.4271 31.1854 67.1458 32.2834 61.164L38.9263 61.8209L33.7087 56.3744C36.916 48.6237 43.4003 43.9477 48.1917 45.9305C52.983 47.9132 54.2671 55.8037 51.0598 63.5545Z\\\" fill=\\\"black\\\"/>', \\n          '     <circle cx=\\\"38.7002\\\" cy=\\\"86.7845\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 38.7002 86.7845)\\\" fill=\\\"black\\\"/>', \\n          '     <circle cx=\\\"45.0635\\\" cy=\\\"88.7366\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 45.0635 88.7366)\\\" fill=\\\"black\\\"/>', \\n          '     <path d=\\\"M78.1321 35.5307C76.9687 35.1738 60.4601 30.166 59.2919 29.9187L60.399 22.464C60.399 13.0751 52.7879 5.46399 43.399 5.46399C34.0102 5.46399 26.399 13.0752 26.399 22.464C26.399 27.069 28.23 31.2463 31.2037 34.3077C22.6098 39.1935 15.79 47.2459 12.6605 57.4471C8.4487 71.1764 11.9538 85.4313 20.6995 95.5384C26.0863 100.686 40.4036 111.247 54.5785 112.308C56.5124 112.901 58.4567 113.341 60.3985 113.634C79.7258 116.553 98.7984 104.951 104.709 85.6854C106.977 78.2901 107.007 70.7422 105.185 63.7723C105.923 63.8703 106.677 63.9209 107.443 63.9209C116.832 63.9209 124.443 56.3097 124.443 46.9209C124.443 37.5321 116.832 29.9209 107.443 29.9209C99.6643 29.9209 93.1061 35.1449 91.0851 42.2758C87.3242 39.3317 82.9703 37.0149 78.1321 35.5307Z\\\" fill=\\\"#FDA2F4\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <path d=\\\"M56.8406 66.9428C53.347 75.3853 56.229 83.7327 62.0905 86.1582C67.952 88.5838 75.8897 84.7138 79.3834 76.2712C82.877 67.8287 79.995 59.4813 74.1335 57.0558C68.272 54.6302 60.3342 58.5002 56.8406 66.9428Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M27.7322 54.8979C24.2386 63.3404 27.1206 71.6877 32.9821 74.1133C38.8436 76.5389 46.7813 72.6689 50.275 64.2263C53.7686 55.7838 50.8866 47.4364 45.0251 45.0109C39.1636 42.5853 31.2258 46.4553 27.7322 54.8979Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M80.4016 76.7713C77.1942 84.522 70.71 89.1979 65.9186 87.2152C62.1216 85.6439 60.5272 80.3626 61.6252 74.3808L68.2681 75.0377L63.0505 69.5912C66.2578 61.8404 72.7421 57.1645 77.5334 59.1473C82.3248 61.13 83.6089 69.0205 80.4016 76.7713Z\\\" fill=\\\"black\\\"/>', \\n          '     <path d=\\\"M51.0598 63.5545C47.8524 71.3052 41.3682 75.9811 36.5768 73.9984C32.7798 72.4271 31.1854 67.1458 32.2834 61.164L38.9263 61.8209L33.7087 56.3744C36.916 48.6237 43.4003 43.9477 48.1917 45.9305C52.983 47.9132 54.2671 55.8037 51.0598 63.5545Z\\\" fill=\\\"black\\\"/>', \\n          '     <circle cx=\\\"38.7002\\\" cy=\\\"86.7845\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 38.7002 86.7845)\\\" fill=\\\"black\\\"/>', \\n          '     <circle cx=\\\"45.0635\\\" cy=\\\"88.7366\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 45.0635 88.7366)\\\" fill=\\\"black\\\"/>', \\n          '</g>'\\n        ));\\n      }\\n      else if((currentPin == 10)) {\\n        //Chilli\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(570, 228)\\\">',\\n          '     <path d=\\\"M68.8545 59.5278C45.368 96.4659 17.426 91.0877 6.39078 83.7813C17.3765 122.64 90.6687 136.77 100.319 98.0561C101.149 94.7248 101.596 91.6637 101.714 88.8532C102.387 72.8422 92.4099 64.9667 82.1317 61.6209C77.4409 60.094 72.6873 59.5105 68.8545 59.5278Z\\\" fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M102.395 90.1588C98.6854 68.0345 82.7469 60.1372 67.7059 58.5314C75.1917 55.7845 86.1193 54.1814 93.9199 58.6391C101.746 56.3044 116.171 48.1315 111.262 34.1172L120.871 36.6786C121.541 41.8861 117.856 54.1663 97.7545 61.6269C102.56 66.6514 105 75.4931 102.395 90.1588Z\\\" fill=\\\"#B4E847\\\"/>', \\n          '     <path d=\\\"M93.9199 58.6391C86.1193 54.1814 75.1917 55.7845 67.7059 58.5314C82.7469 60.1372 98.6854 68.0345 102.395 90.1588C105 75.4931 102.56 66.6514 97.7545 61.6269M93.9199 58.6391C101.746 56.3044 116.171 48.1315 111.262 34.1172L120.871 36.6786C121.541 41.8861 117.856 54.1663 97.7545 61.6269M93.9199 58.6391C95.3097 59.4333 96.6003 60.42 97.7545 61.6269\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '</g>'\\n          ));\\n      }\\n      else if(currentPin == 11){\\n         // Shark\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(570, 260)\\\">',\\n            '     <path d=\\\"M99.085 29.4517C83.8972 28.6888 61.085 64.4512 32.585 60.4512C6.18476 55.6515 8.9185 49.9518 5.08541 40.9517C2.08515 36.9517 -3.71354 33.3521 17.0865 20.9522C22.9158 17.477 29.2478 15.4392 35.585 14.4051C33.585 5.45246 52.085 -2.04872 56.585 4.45172C53.4183 6.48597 48.185 11.1942 52.585 13.7531C62.4001 14.4774 70.9853 16.8653 76.0865 18.9521C84.5865 21.6188 102.486 25.3521 106.086 18.9521C110.586 10.9521 125.586 13.4521 121.086 17.4521C116.586 21.4521 124.586 54.9521 121.086 52.9521C118.286 51.3521 115.167 43.6667 114.5 41C115 36.5 110 30 99.085 29.4517Z\\\" fill=\\\"#D9D9D9\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>', \\n            '     <path d=\\\"M106.086 18.9521C110.586 10.9521 125.586 13.4521 121.086 17.4521C118.588 27.453 125.085 51.4512 121.086 52.9512C117.888 54.1512 114.753 42.4512 113.585 36.4512C111.752 31.2848 92.0988 30.0008 90.5 32C88.5015 34.499 58.4713 36.4002 63.5 30C74.5 16 49.6662 30.6667 43 29C38.3333 31 32.1 36.1 26.5 34.5C20.9 32.9 8.75192 37.4515 5.08541 40.9517C2.08515 36.9517 -3.71354 33.3521 17.0865 20.9522C22.9158 17.477 29.2478 15.4392 35.585 14.4051C33.585 5.45246 52.085 -2.04872 56.585 4.45172C53.4183 6.48597 48.185 11.1942 52.585 13.7531C62.4001 14.4774 70.9853 16.8653 76.0865 18.9521C84.5865 21.6188 102.486 25.3521 106.086 18.9521Z\\\" fill=\\\"#93969F\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>', \\n            '     <path d=\\\"M9.68247 49.7595C9.59357 49.7051 9.55378 49.6671 9.5389 49.6507L9.53364 49.6349L6.67485 41.0585C6.97146 40.5953 7.48161 39.9694 8.26214 39.2511C9.59212 38.0271 11.9219 37.0426 15.4566 36.0411L15.6132 35.9967L15.7743 35.9519C17.6141 35.4401 19.7248 34.9322 22.1139 34.3802H27.085H27.1165L27.148 34.3782C29.738 34.2148 33.2482 33.5064 37.9092 31.909C39.62 31.3227 41.4886 30.6157 43.5266 29.7703C44.7491 33.2723 44.4897 37.1039 42.4196 40.4218C40.8458 42.9442 38.1884 45.2312 34.208 46.851C32.148 47.6893 29.7341 48.3483 26.9374 48.7655C26.4601 48.8366 25.9717 48.9008 25.4721 48.9576C20.4108 49.5327 17.416 49.9615 15.5468 50.2292C15.3234 50.2612 15.1161 50.2909 14.9233 50.3182C13.0488 50.5841 12.7275 50.5884 12.3446 50.4855C12.1737 50.4395 11.9213 50.3917 11.6788 50.3458C11.6103 50.3328 11.5427 50.32 11.4779 50.3074C11.1477 50.2433 10.7957 50.1691 10.4648 50.0733C10.1258 49.9751 9.86014 49.8684 9.68247 49.7595Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\"/>', \\n            '     <circle cx=\\\"29.5\\\" cy=\\\"24.5\\\" r=\\\"3.5\\\" fill=\\\"black\\\"/>', \\n          '</g>'\\n        ));\\n      }\\n      else if(currentPin == 12) {\\n        // Devil\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(572, 240)\\\">',\\n            '     <path d=\\\"M82.8403 67.3863C82.8403 89.1574 65.1913 106.806 43.4202 106.806C21.649 106.806 4 89.1574 4 67.3863C4 55.5014 9.25955 44.8449 17.5781 37.6175C14.9949 35.6058 11.9039 31.5264 10.9256 25.7761C9.98209 20.2297 11.0042 13.1289 16.3435 4.82993C16.8085 4.10709 17.9034 4.30556 18.134 5.13358C19.3368 9.453 21.3863 15.2351 24.1057 20.0821C26.6484 24.6142 29.7768 28.3286 33.3461 29.2651C36.5618 28.4175 39.9383 27.9661 43.4202 27.9661C56.317 27.9661 67.7673 34.1594 74.9592 43.7342C77.4836 44.3606 81.7058 44.4396 86.3444 42.7224C89.057 41.7183 91.912 40.0999 94.6531 37.6175C96.4777 35.965 98.2519 33.9298 99.9 31.438C100.402 30.6794 101.569 30.87 101.693 31.771C102.697 39.0606 101.598 50.2108 92.9144 56.9411C90.2107 59.0366 86.7718 60.7037 82.4321 61.6923C82.7011 63.5514 82.8403 65.4526 82.8403 67.3863Z\\\" fill=\\\"#FB4A4A\\\"/>', \\n            '     <path d=\\\"M17.5781 37.6175C9.25955 44.8449 4 55.5014 4 67.3863C4 89.1574 21.649 106.806 43.4202 106.806C65.1913 106.806 82.8403 89.1574 82.8403 67.3863C82.8403 65.4526 82.7011 63.5514 82.4321 61.6923M17.5781 37.6175C14.9949 35.6058 11.9039 31.5264 10.9256 25.7761M17.5781 37.6175C17.5781 37.6175 21.2525 34.8332 24.1057 33.2221C27.418 31.3518 33.3461 29.2651 33.3461 29.2651M33.3461 29.2651C36.5618 28.4175 39.9383 27.9661 43.4202 27.9661C56.317 27.9661 67.7673 34.1594 74.9592 43.7342M33.3461 29.2651C29.7768 28.3286 26.6484 24.6142 24.1057 20.0821M74.9592 43.7342C77.4836 44.3606 81.7058 44.4396 86.3444 42.7224M74.9592 43.7342C77.334 47.0922 82.1534 55.385 82.4321 61.6923M82.4321 61.6923C86.7718 60.7037 90.2107 59.0366 92.9144 56.9411M86.3444 42.7224C86.9284 46.3163 89.06 54.1914 92.9144 56.9411M86.3444 42.7224C89.057 41.7183 91.912 40.0999 94.6531 37.6175C96.4777 35.965 98.2519 33.9298 99.9 31.438C100.402 30.6794 101.569 30.87 101.693 31.771C102.697 39.0606 101.598 50.2108 92.9144 56.9411M10.9256 25.7761C9.98209 20.2297 11.0042 13.1289 16.3435 4.82993C16.8085 4.10709 17.9034 4.30556 18.134 5.13358C19.3368 9.453 21.3863 15.2351 24.1057 20.0821M10.9256 25.7761C14.1369 26.6521 21.2686 26.7397 24.1057 20.0821\\\" fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M45.9608 89.3262C48.1423 88.9241 50.3814 88.2652 52.6507 87.2906C53.3949 86.9711 54.2306 87.5829 54.11 88.3838L53.011 95.6804C52.8799 96.5508 51.7694 96.8394 51.231 96.1431L45.9608 89.3262ZM45.9608 89.3262C39.0775 90.5949 32.7681 89.3065 27.8951 87.3072M27.8951 87.3072C25.1855 86.1955 22.9199 84.8639 21.2468 83.6299C20.6824 83.2136 19.8557 83.4387 19.6221 84.1L16.9174 91.7586C16.6062 92.6398 17.5662 93.4283 18.3702 92.9519L27.8951 87.3072Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '     <path d=\\\"M46.9278 60.6561C43.8989 67.9756 46.4293 75.1111 51.3924 77.1649C56.3555 79.2187 63.1881 75.9577 66.217 68.6382C69.2459 61.3187 66.7155 54.1831 61.7524 52.1293C56.7893 50.0756 49.9567 53.3366 46.9278 60.6561Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '     <path d=\\\"M21.4288 50.1043C18.3999 57.4238 20.9303 64.5594 25.8934 66.6131C30.8564 68.6669 37.6891 65.4059 40.718 58.0864C43.7469 50.7669 41.2164 43.6314 36.2534 41.5776C31.2903 39.5238 24.4577 42.7848 21.4288 50.1043Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '     <path d=\\\"M67.3385 69.1717C64.5288 75.9614 58.8486 80.0575 54.6513 78.3206C51.3252 76.9442 49.9284 72.3177 50.8903 67.0777L56.7095 67.6531L52.1389 62.882C54.9485 56.0923 60.6287 51.9962 64.826 53.733C69.0232 55.4699 70.1481 62.3821 67.3385 69.1717Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M41.6344 57.5936C38.8247 64.3833 33.1445 68.4794 28.9472 66.7425C25.6211 65.3661 24.2243 60.7396 25.1861 55.4995L31.0054 56.075L26.4348 51.3038C29.2444 44.5142 34.9246 40.418 39.1219 42.1549C43.3191 43.8918 44.444 50.8039 41.6344 57.5936Z\\\" fill=\\\"black\\\"/>', \\n            '     <ellipse cx=\\\"27.1233\\\" cy=\\\"76.7549\\\" rx=\\\"5.57755\\\" ry=\\\"1.37771\\\" transform=\\\"rotate(1.09864 27.1233 76.7549)\\\" fill=\\\"black\\\"/>', \\n            '     <ellipse rx=\\\"5.57755\\\" ry=\\\"1.37771\\\" transform=\\\"matrix(-0.892204 -0.451633 -0.451633 0.892204 40.2589 80.7707)\\\" fill=\\\"black\\\"/>', \\n            '     <circle cx=\\\"33.3408\\\" cy=\\\"73.0757\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 33.3408 73.0757)\\\" fill=\\\"black\\\"/>', \\n            '     <circle cx=\\\"38.915\\\" cy=\\\"74.7857\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 38.915 74.7857)\\\" fill=\\\"black\\\"/>',\\n            '</g>'\\n        ));\\n      }\\n      else if( currentPin == 13) {\\n        //Fire\\n        return string (abi.encodePacked(\\n            '<g transform=\\\"translate(572, 240)\\\">',\\n            '     <path d=\\\"M44.9741 21.9402C12.4588 36.3461 7.64411 60.0251 13.7983 81.1875C22.2387 99.1338 43.7985 105.598 52.0622 105.619C103.39 103.307 109.318 57.9705 87.7567 20.6988C81.9799 42.2108 70.6308 59.1406 52.6079 53.0737C38.1896 48.2201 41.5111 30.2957 44.9741 21.9402Z\\\" fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M40.1317 62.5768C22.1274 68.8144 20.1037 80.5169 24.2235 91.2875C29.5436 100.517 41.9591 104.394 46.6446 104.651C75.6747 105.024 77.684 82.52 64.3493 63.2311C61.7155 73.8209 55.7861 81.9522 45.3876 78.3797C37.0688 75.5218 38.4175 66.6536 40.1317 62.5768Z\\\" fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '</g>'\\n        ));\\n      }\\n      else {\\n        return \\\"\\\";\\n      }\\n    }\\n}\\n\",\"keccak256\":\"0x1d0e495841694c8b97f8bc15ca92a8a8211556f070d16e00e439e4f3d263565d\",\"license\":\"MIT\"},\"contracts/StyleLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\nlibrary StyleLibrary {\\n    function GetStyle() public pure returns (string memory) {\\n        string memory style = string(\\n            abi.encodePacked(\\\"\\\")\\n        );\\n        return style;\\n    }\\n\\n    function HideBackClipStyle() public pure returns(string memory){\\n        string memory style = string(\\n            abi.encodePacked(\\n            '     <defs>', \\n            '         <style>', \\n            '             .backClip {', \\n            '                 opacity: 0;', \\n            '             }', \\n            '         </style>', \\n            '     </defs>'\\n            ));\\n        return style;\\n    }\\n\\n     function ShowBackClipStyle() public pure returns(string memory){\\n        string memory style = string(\\n            abi.encodePacked(\\n            '     <defs>', \\n            '         <style>', \\n            '             .backClip {', \\n            '                 opacity: 1;', \\n            '             }', \\n            '         </style>', \\n            '     </defs>'\\n            ));\\n        return style;\\n    }\\n}\\n\",\"keccak256\":\"0x9341e905a3b39f764a302d02fe1a08c3705eba8c30c67c99333074e3e6930a51\",\"license\":\"MIT\"},\"contracts/ThisSocks.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nimport  \\\"./StyleLibrary.sol\\\";\\nimport  \\\"./SockPinLibrary.sol\\\";\\nimport  \\\"./SockLayoutLibrary.sol\\\";\\nimport  \\\"./SockBackgroundLibrary.sol\\\";\\n\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\ncontract ThisSocks is ERC721Enumerable, Ownable {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n\\n    uint256 mintDeadline = block.timestamp + 3650 days;\\n\\n\\n    // all funds go to buidlguidl.eth\\n    address payable public constant recipient =\\n        payable(0x54179E1770a780F2F541f23CB21252De12977d3c);\\n\\n    uint256 public constant limit = 3728;\\n    uint256 public constant curve = 1002; // price increase 0,4% with each purchase\\n    uint256 public price = 0.001 ether;\\n    // the 1154th optimistic parrot cost 0.01 ETH, the 2306th cost 0.1ETH, the 3459th cost 1 ETH and the last ones cost 1.7 ETH\\n\\n    // create some DS that gives color set number and then color set number gives color values\\n    // YOUR_STORAGE_DS_HERE\\n\\n    //Pin By token Id\\n    mapping(uint256 => uint256) tokenPin;\\n    mapping(uint256 => uint256[]) sockColors;\\n    mapping(uint256 => uint256) sockBackgroundColor;\\n    mapping(uint256 => uint256) sockBackgroundType;\\n\\n\\n    constructor() ERC721(\\\"ThisSock\\\", \\\"THS\\\") {\\n    \\n    }\\n\\n    function mintItem() public payable returns (uint256) {\\n        require(block.timestamp < mintDeadline, \\\"DONE MINTING\\\");\\n        require(msg.value >= price, \\\"NOT ENOUGH\\\");\\n\\n        price = (price * curve) / 1000;\\n\\n        _tokenIds.increment();\\n\\n        uint256 id = _tokenIds.current();\\n        _mint(msg.sender, id);\\n\\n        bytes32 predictableRandom = keccak256(\\n            abi.encodePacked(\\n                id,\\n                blockhash(block.number - 1),\\n                msg.sender,\\n                address(this)\\n            )\\n        );\\n        \\n        tokenPin[id] = getPredicableRandomNumber(predictableRandom,5,6,20); \\n        sockColors[id] = [\\n            getPredicableRandomNumber(predictableRandom,1,2,12), \\n            getPredicableRandomNumber(predictableRandom,8,9,12), \\n            getPredicableRandomNumber(predictableRandom,20,30,12)\\n        ];\\n        sockBackgroundColor[id] = getPredicableRandomNumber(predictableRandom,27,31,11);\\n        sockBackgroundType[id] = getPredicableRandomNumber(predictableRandom,20,22,31);\\n        \\n\\n\\n        (bool success, ) = recipient.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n\\n        return id;\\n    }\\n\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\n        require(_exists(id), \\\"!exist\\\");\\n\\n        string memory name = string(\\n            abi.encodePacked(\\\"Sock #\\\", id.toString())\\n        );\\n\\n        string memory base = string(\\\"Sock\\\");\\n        string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n\\n        string memory description = string(\\n            abi.encodePacked(\\\"\\\")\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\",\\\"description\\\":\\\"',\\n                                description,\\n                                '\\\",\\\"external_url\\\":\\\"https://thissocks.com/token/',\\n                                id.toString(),\\n                                '\\\", \\\"owner\\\":\\\"',\\n                                (uint160(ownerOf(id))).toHexString(20),\\n                                '\\\",\\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                image,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    // function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n    function generateSVGofTokenById(uint256 id)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        string memory svg = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"1080\\\" height=\\\"1080\\\" viewBox=\\\"0 0 1080 1080\\\">',\\n                renderTokenById(id),\\n                \\\"</svg>\\\"\\n            )\\n        );\\n        return svg;\\n    }\\n\\n    // Visibility is `public` to enable it being called by other contracts for composition.\\n    function renderTokenById(uint256 id) public view returns (string memory) {\\n        (uint256 color1, uint256 color2, uint256 color3)= getColorsByTokenId(id); \\n        uint256 backgroundType =  getBackgroundTypeByTokenId(id);\\n        string memory render = string(\\n            abi.encodePacked(\\n                SockBackgroundLibrary.GetBackground(\\n                    backgroundType,\\n                    SockBackgroundLibrary.GetBackgroundColor(getBackgroundByTokenId(id))\\n                ),\\n                '<g transform=\\\"translate(180, 130)\\\">',\\n                    SockBackgroundLibrary.BackClip(backgroundType),\\n                    SockLayoutLibrary.GetLayout(\\n                        SockLayoutLibrary.GetColor(color1), \\n                        SockLayoutLibrary.GetColor(color2), \\n                        SockLayoutLibrary.GetColor(color3)\\n                    ),\\n                    SockPinLibrary.GetPin(getPinByTokenId(id)),\\n                '</g>',\\n                SockBackgroundLibrary.FrontClip(backgroundType)\\n            )\\n        );\\n        // we want tail to render first so\\n        // we list the order in which item should render so that no one hides other\\n        return render;\\n    }\\n\\n    function getPinByTokenId(uint256 id) public view returns (uint256) {\\n       return tokenPin[id];\\n    }\\n\\n    function setPinByTokenId(uint256 id, uint256 pinId ) public  {\\n        tokenPin[id] = pinId ;\\n    }\\n\\n    function getBackgroundByTokenId(uint256 id) public view returns (uint256) {\\n       return sockBackgroundColor[id];\\n    }\\n\\n    function setBackgroundByTokenId(uint256 id, uint256 backgroundId ) public  {\\n        sockBackgroundColor[id] = backgroundId;\\n    }\\n\\n     function getBackgroundTypeByTokenId(uint256 id) public view returns (uint256) {\\n       return sockBackgroundType[id];\\n    }\\n\\n    function setBackgroundTypeByTokenId(uint256 id, uint256 backgroundType ) public  {\\n        sockBackgroundType[id] = backgroundType;\\n    }\\n\\n    function getColorsByTokenId(uint256 id) public view returns (uint256 color1 , uint256 color2, uint256 color3 ) {\\n       require(_exists(id), \\\"!exist\\\");\\n       color1 =  sockColors[id][0];\\n       color2 =  sockColors[id][1];\\n       color3 =  sockColors[id][2];\\n    }\\n\\n    function setColorsByTokenId(uint256 id,uint256 color1 , uint256 color2, uint256 color3) public  {\\n        require(_exists(id), \\\"!exist\\\");\\n        sockColors[id][0] = color1;\\n        sockColors[id][1] = color2;\\n        sockColors[id][2] = color3;\\n    }\\n    \\n    function getPredicableRandomNumber(bytes32 data, uint256 minByte, uint256 maxByte,  uint8 maxNumber) private pure returns (uint256) {\\n     return uint256(\\n            ((uint8(data[minByte]) << maxNumber) | uint8(data[minByte])) %\\n              maxNumber\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x40c73b2ffbd32eeb2d35672e442732fa1064c9f34da90d7409a626a60832a3e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200018b5762000014620001a7565b60206754686973536f636b60c01b8183015262000030620001dc565b6254485360e81b8282015282519091906001600160401b0381116200017b575b6000916200006a826200006485546200023d565b6200027a565b80601f8311600114620000ed57508190620000a1958492620000e1575b50508160011b916000199060031b1c19161790556200032e565b620000ac3362000430565b620000c0620000bb4262000211565b600c55565b620000d166038d7ea4c68000600d55565b604051612cfc90816200047f8239f35b01519050388062000087565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000162575050916001939187620000a198941062000148575b505050811b0190556200032e565b015160001960f88460031b161c191690553880806200013a565b806001869782949787015181550196019401906200011d565b6200018562000190565b62000050565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b03811183821017620001cc575b60405260088252565b620001d662000190565b620001c3565b60408051919082016001600160401b0381118382101762000201575b60405260038252565b6200020b62000190565b620001f8565b6312cc030019811162000227576312cc03000190565b634e487b7160e01b600052601160045260246000fd5b90600182811c921680156200026f575b60208310146200025957565b634e487b7160e01b600052602260045260246000fd5b91607f16916200024d565b601f811162000287575050565b60009081805260208220906020601f850160051c83019410620002c7575b601f0160051c01915b828110620002bb57505050565b818155600101620002ae565b9092508290620002a5565b90601f8211620002e0575050565b60019160009083825260208220906020601f850160051c8301941062000323575b601f0160051c01915b828110620003185750505050565b81815583016200030a565b909250829062000301565b80519091906001600160401b03811162000420575b6001906200035d816200035784546200023d565b620002d2565b602080601f83116001146200039b5750819293946000926200038f575b5050600019600383901b1c191690821b179055565b0151905038806200037a565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b888210620004085750508385969710620003ee575b505050811b019055565b015160001960f88460031b161c19169055388080620003e4565b808785968294968601518155019501930190620003cf565b6200042a62000190565b62000343565b600a80546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146102a757806306fdde031461029e578063081812fc14610295578063095ea7b31461028c57806318160ddd1461028357806323b872dd1461027a5780632bf19156146102715780632f745c59146102685780632ff78f9e1461025f57806342842e0e146102565780634f6ccce71461024d5780635af545dc146102445780635e3ec0761461023b57806360f42613146102325780636352211e1461022957806366d003ac146102205780636ef0517a1461021757806370a082311461020e578063715018a6146102055780637165485d146101fc5780637d518532146101f3578063815ef883146101ea5780638da5cb5b146101e157806395d89b41146101d8578063a035b1fe146101cf578063a22cb465146101c6578063a2d6c6da146101bd578063a4d66daf146101b4578063b88d4fde146101ab578063c87b56dd146101a2578063e985e9c514610199578063eb93406b146101905763f2fde38b1461018857600080fd5b61000e611339565b5061000e611144565b5061000e6110e6565b5061000e610ebe565b5061000e610e35565b5061000e610d53565b5061000e610d1f565b5061000e610c36565b5061000e610c17565b5061000e610b55565b5061000e610b2b565b5061000e610a6f565b5061000e610a42565b5061000e610a24565b5061000e6109bf565b5061000e610993565b5061000e610966565b5061000e610936565b5061000e610917565b5061000e6108e5565b5061000e6108b8565b5061000e61088b565b5061000e6107df565b5061000e610798565b5061000e61076b565b5061000e6106b7565b5061000e61068a565b5061000e610660565b5061000e61060c565b5061000e61051c565b5061000e6104bf565b5061000e6103b9565b5061000e6102c2565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356102e2816102b0565b63ffffffff60e01b1663780e9d6360e01b8114908115610308575b506040519015158152f35b6380ac58cd60e01b81149150811561033a575b8115610329575b50386102fd565b6301ffc9a760e01b14905038610322565b635b5e139f60e01b8114915061031b565b918091926000905b82821061036b575011610364575050565b6000910152565b91508060209183015181860152018291610353565b906020916103998151809281855285808601910161034b565b601f01601f1916010190565b9060206103b6928181520190610380565b90565b503461000e576000806003193601126104bc57604051908080549060019180831c928082169283156104b2575b602092838610851461049e578588526020880194908115610482575060011461042a575b6104268761041a81890382610dcb565b604051918291826103a5565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b838610610471575050509101905061041a82610426388061040a565b805485870152948201948101610455565b60ff1916855250505001915061041a905082610426388061040a565b634e487b7160e01b82526022600452602482fd5b93607f16936103e6565b80fd5b503461000e57602036600319011261000e5760206104de6004356115c6565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576105366104f0565b602435610542816114e1565b916001600160a01b0380841690821681146105bd576105749361056f913314908115610576575b50611559565b611abb565b005b6001600160a01b031660009081526005602052604090206105b791506105b09033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b38610569565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e576020600854604051908152f35b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576105746106723661062b565b91610685610680843361177a565b611649565b61191e565b503461000e57602036600319011261000e5760043560005260106020526020604060002054604051908152f35b503461000e57604036600319011261000e576106d16104f0565b602435906106de81611469565b821015610712576001600160a01b031660009081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b503461000e57604036600319011261000e5760043560005260116020526024356040600020556000604051f35b503461000e576105746107aa3661062b565b9060405192602084018481106001600160401b038211176107d2575b604052600084526116c2565b6107da610d71565b6107c6565b503461000e57602036600319011261000e576004356008548110156108315760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b503461000e57602036600319011261000e5760043560005260116020526020604060002054604051908152f35b503461000e57604036600319011261000e5760043560005260106020526024356040600020556000604051f35b503461000e57602036600319011261000e576060610904600435612c3e565b9060405192835260208301526040820152f35b503461000e57602036600319011261000e5760206104de6004356114e1565b503461000e57600036600319011261000e5760206040517354179e1770a780f2f541f23cb21252de12977d3c8152f35b503461000e57604036600319011261000e57600435600052600e6020526024356040600020556000604051f35b503461000e57602036600319011261000e5760206109b76109b26104f0565b611469565b604051908152f35b503461000e576000806003193601126104bc57600a546001600160a01b038116906109eb3383146113d0565b6001600160a01b031916600a556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760206040516103ea8152f35b503461000e57602036600319011261000e57600435600052600e6020526020604060002054604051908152f35b503461000e57608036600319011261000e57600435610a95610a908261175d565b612203565b600090808252600f60205260408220805415610b1e575b82526024356020832055808252600f60205260408220805460011015610b11575b825260443560016020842001558152600f602052610b0c610af060408320611c7e565b6064359082549060031b600019811b9283911b16911916179055565b604051f35b610b19611c67565b610acd565b610b26611c67565b610aac565b503461000e57600036600319011261000e57600a546040516001600160a01b039091168152602090f35b503461000e576000806003193601126104bc576040519080600190815480831c92808216928315610c0d575b602092838610851461049e5785885260208801949081156104825750600114610bb4576104268761041a81890382610dcb565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610bfc575050509101905061041a82610426388061040a565b805485870152948201948101610be0565b93607f1693610b81565b503461000e57600036600319011261000e576020600d54604051908152f35b503461000e57604036600319011261000e57610c506104f0565b602435801515810361000e576001600160a01b03821691338314610cde5781610c9b610cac9233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606490fd5b503461000e57602036600319011261000e57610426610d3f600435612781565b604051918291602083526020830190610380565b503461000e57600036600319011261000e576020604051610e908152f35b50634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117610da357604052565b610dab610d71565b604052565b604081019081106001600160401b03821117610da357604052565b90601f801991011681019081106001600160401b03821117610da357604052565b60405190606082018281106001600160401b03821117610da357604052565b6020906001600160401b038111610e28575b601f01601f19160190565b610e30610d71565b610e1d565b503461000e57608036600319011261000e57610e4f6104f0565b610e57610506565b606435916001600160401b03831161000e573660238401121561000e57826004013591610e8383610e0b565b92610e916040519485610dcb565b808452366024828701011161000e57602081600092602461057498018388013785010152604435916116c2565b503461000e57602036600319011261000e57600435610edc8161175d565b610ee590612203565b610eee816122f6565b60405165536f636b202360d01b60208201529190829060268201610f1191612238565b0391601f19928381018252610f269082610dcb565b610f2e61224b565b50610f388261261d565b610f4190612534565b6040519260008452610f5284610d88565b610f5b816122f6565b90610f65906114e1565b610f77906001600160a01b0316612408565b604051683d913730b6b2911d1160b91b602082015294859491929160298601610f9f91612238565b701116113232b9b1b934b83a34b7b7111d1160791b8152601101610fc291612238565b7f222c2265787465726e616c5f75726c223a2268747470733a2f2f74686973736f81526d636b732e636f6d2f746f6b656e2f60901b6020820152602e0161100891612238565b6b1116101137bbb732b9111d1160a11b8152600c0161102691612238565b6b11161134b6b0b3b2911d101160a11b8152600c017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0161106a91612238565b61227d60f01b81526002010382810182526110859082610dcb565b61108e90612534565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d82016110c891612238565b0390810182526110d89082610dcb565b6040516104268192826103a5565b503461000e57604036600319011261000e57602060ff6111386111076104f0565b61110f610506565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b506000806003193601126104bc5761042690611163600c544210611f87565b61118d611188611180600d5461117b81341015611fc2565b611ffb565b6103e8900490565b600d55565b61119b6001600b5401600b55565b611329600b54916111ac83336120ec565b6112e96111b8436118c5565b60408051602081018781529240918101919091526bffffffffffffffffffffffff1933606090811b82168184015230901b16607482015261120681608881015b03601f198101835282610dcb565b51902061122081601460ff9160051a8281831b1617061690565b61123486600052600e602052604060002090565b556112aa611240610dec565b61125783600c60ff9160011a8281831b1617061690565b815261127083600c60ff9160081a8281831b1617061690565b602082015261128c83600c60ff9160141a8281831b1617061690565b60408201526112a587600052600f602052604060002090565b612043565b6112c181600b60ff91601b1a8281831b1617061690565b6112d5866000526010602052604060002090565b55601f60ff9160141a8281831b1617061690565b6112fd846000526011602052604060002090565b558080604051347354179e1770a780f2f541f23cb21252de12977d3c5af1611323611b74565b506120af565b6040519081529081906020820190565b503461000e57602036600319011261000e576113536104f0565b600a546001600160a01b039061136c90821633146113d0565b81161561137c576105749061141b565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b156113d757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600a80546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3565b6001600160a01b0316801561148957600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b6000908152600260205260409020546001600160a01b031680156115025790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b1561156057565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608490fd5b6115cf8161175d565b156115ef576000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561165057565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608490fd5b604051906116bc82610d88565b60008252565b906116e69392916116d6610680843361177a565b6116e183838361191e565b611ba4565b156116ed57565b60405162461bcd60e51b8152806117066004820161170a565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6000908152600260205260409020546001600160a01b0316151590565b6117838261175d565b156117fc57611791826114e1565b6001600160a01b0382811682821681149490919085156117e4575b50505082156117ba57505090565b6001600160a01b0316600090815260056020526040902060ff92506117df9190610599565b541690565b6117f191929395506115c6565b1614913880806117ac565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561185d57565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b600181106118d5575b6000190190565b6118dd6118ae565b6118ce565b60019060011981116118f2570190565b6118fa6118ae565b0190565b60029060021981116118f2570190565b60209060201981116118f2570190565b90611928836114e1565b6001600160a01b038381169290918216839003611a0e576119826119e592821694611954861515611856565b61195f878483611cd4565b61196887611a65565b6001600160a01b0316600090815260036020526040902090565b61198c81546118c5565b90556001600160a01b03811660009081526003602052604090206119b081546118e2565b90556119c6856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03611a92836114e1565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380611af4846114e1565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516103b6816102b0565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526103b692910190610380565b506040513d6000823e3d90fd5b3d15611b9f573d90611b8582610e0b565b91611b936040519384610dcb565b82523d6000602084013e565b606090565b92909190823b15611c5e57611bd7926020926000604051809681958294630a85bd0160e11b9a8b85523360048601611b36565b03926001600160a01b03165af160009181611c2e575b50611c2057611bfa611b74565b80519081611c1b5760405162461bcd60e51b8152806117066004820161170a565b602001fd5b6001600160e01b0319161490565b611c5091925060203d8111611c57575b611c488183610dcb565b810190611b21565b9038611bed565b503d611c3e565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b805460021015611c9a575b600052600260206000200190600090565b611ca2611c67565b611c89565b90611cb181611e31565b6001600160a01b038216611ccb57611cc99150611ea5565b565b611cc991611df9565b9091906001600160a01b038082169182611d0e5750611cf283611e31565b831680611d05575050611cc99150611ea5565b03611ccb575050565b8185168303611d1e575b50611cf2565b611d92611d2a82611469565b60018110611dec575b60001901611d8360009387855260076020526040852054838103611d99575b5084611d68896000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b90600052602052604060002090565b5538611d18565b878652600660205260408620848752602052611de5604087205480611dd484611d838760018060a01b03166000526006602052604060002090565b556000526007602052604060002090565b5538611d52565b611df46118ae565b611d33565b604090611e0581611469565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055600160401b811015611e98575b6001810180600855811015611e8b575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611e93611c67565b611e61565b611ea0610d71565b611e51565b6008611f1b81549260018410611f7a575b600091818392835260096020526040832054611f0a60001997808981011015611f6d575b87865288816020882001015490831015611f60575b87865280836020882001556000526009602052604060002090565b556000526009602052604060002090565b558154928315611f4c578084019380851015611f3f575b8383526020832001015555565b611f47611c67565b611f32565b634e487b7160e01b82526031600452602482fd5b611f68611c67565b611eef565b611f75611c67565b611eda565b611f826118ae565b611eb6565b15611f8e57565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15611fc957565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b6103ea908060001904821181151516612012570290565b61201a6118ae565b0290565b6001600160fe1b038111600116612036575b60021b90565b61203e6118ae565b612030565b805491600392838355808410612086575b50906000526020806000206000925b848410612071575050505050565b60018382829351855501920193019290612063565b6000838152846020822092830192015b8281106120a4575050612054565b818155600101612096565b156120b657565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b6001600160a01b0381169081156121bf576121068361175d565b61217a57806121188461215093611ca7565b6001600160a01b038116600090815260036020526040902061213a81546118e2565b90556119c6846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b1561220a57565b60405162461bcd60e51b815260206004820152600660248201526508595e1a5cdd60d21b6044820152606490fd5b906118fa6020928281519485920161034b565b6040519061225882610db0565b6004825263536f636b60e01b6020830152565b60405190606082018281106001600160401b03821117612298575b604052602a8252604082602036910137565b6122a0610d71565b612286565b906122af82610e0b565b6122bc6040519182610dcb565b82815280926122cd601f1991610e0b565b0190602036910137565b9060209180518210156122e957010190565b6122f1611c67565b010190565b8015612392576000818181805b6123685750612311816122a5565b935b61231d5750505090565b612326906118c5565b90600a9060308282068019821161235b575b0160f81b6001600160f81b031916841a61235284876122d7565b53049081612313565b6123636118ae565b612338565b91506001600a916000198114612385575b01910480849291612303565b61238d6118ae565b612379565b5060405161239f81610db0565b60018152600360fc1b602082015290565b80156118d5576000190190565b156123c457565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b61241061226b565b908151156124aa575b60306020830153815160019081101561249d575b90607860218401536029915b80831161244c57506103b69150156123bd565b9080600f61248992166010811015612490575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a61247f85876122d7565b5360041c926123b0565b9190612439565b612498611c67565b61245f565b6124a5611c67565b61242d565b6124b2611c67565b612419565b60405190606082018281106001600160401b03821117612527575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b61252f610d71565b6124d2565b805115612614576125436124b7565b61255f61255a61255384516118fe565b6003900490565b61201e565b9161257161256c8461190e565b6122a5565b92835280815182019060208501935b8282106125c2575050506003905106806001146125b1576002146125a2575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190612580565b506103b66116af565b61262690612781565b6103b6608160405180937f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208301527f30302f737667222077696474683d223130383022206865696768743d2231303860408301527f30222076696577426f783d2230203020313038302031303830223e000000000060608301526126b6815180926020607b8601910161034b565b8101651e17b9bb339f60d11b607b820152036061810184520182610dcb565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e57805161270781610e0b565b926127156040519485610dcb565b8184526020828401011161000e576103b6916020808501910161034b565b6040906103b6939281528160208201520190610380565b91612773906127656103b69593606086526060860190610380565b908482036020860152610380565b916040818403910152610380565b6103b6612a1e9161282f61279482612c3e565b936127ac819392936000526011602052604060002090565b5473a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc96127d6836000526010602052604060002090565b5460409384519663749e421b60e01b88526000888181819b6128016004988983019190602083019252565b0381895af4908115612c31575b8291612c17575b508751809b819263132ffe9960e31b835289888401612733565b0381875af4988915612c0a575b8899612bd4575b509287926129a097959287956111f89b9c612959995198630f500e3b60e41b8a52878a806128788a8983019190602083019252565b0381895af4998a15612bc7575b889a612b99575b50916128fe898961292994819673E6E340D132b5f46d1e472DebcD681B2aBc16e57E958a8551958587806128d26313f89b4360e31b978883528683019190602083019252565b03818c5af4968715612b8c575b8697612b6a575b50518381529081019182529584918791829160200190565b0381895af4948515612b5d575b8395612b41575b508d51968792839283528b83019190602083019252565b0381865af4938415612b34575b8594612b18575b508a51635a8289c960e01b81529c8d94859384938a850161274a565b03915af4978815612b0b575b8598612ae9575b506129828591600052600e602052604060002090565b548651809a8192630c0d0b6560e41b83528583019190602083019252565b03817384eA74d481Ee0A5332c457a4d796187F6Ba67fEB5af4978815612adc575b8498612ab6575b50845163c9e3104760e01b81529081019283529291839190829081906020015b03915af4958615612aa9575b8096612a69575b5050612a5992612a53612a539593612a53612a5394519c8d9b60208d0190612238565b7f3c67207472616e73666f726d3d227472616e736c617465283138302c2031333081526214911f60e91b602082015260230190565b90612238565b631e17b39f60e11b815260040190565b612a53929650612a539593612a53612a9a612a599794612a53943d8091833e612a928183610dcb565b8101906126d5565b989450509395508194506129fb565b612ab1611b67565b6129f4565b6129e8949392919850612ad2903d8086833e612a928183610dcb565b97909192936129c8565b612ae4611b67565b6129c1565b85919850612b03612982913d8085833e612a928183610dcb565b98915061296c565b612b13611b67565b612965565b612b2d9194503d8087833e612a928183610dcb565b923861293d565b612b3c611b67565b612936565b612b569195503d8085833e612a928183610dcb565b9338612912565b612b65611b67565b61290b565b869392919750612b83903d8086833e612a928183610dcb565b969091926128e6565b612b94611b67565b6128df565b8893919a50898461292994612bba6128fe943d8085833e612a928183610dcb565b9d9496509450505061288c565b612bcf611b67565b612885565b6111f89950926129a0979592612959979592612bfa8b963d8089833e612a928183610dcb565b9b50929597509295975092612843565b612c12611b67565b61283c565b612c2b91503d8084833e612a928183610dcb565b38612815565b612c39611b67565b61280e565b612c4a610a908261175d565b600091818352600f60205260408320805415612cb9575b8352612ca2612c9d600160208087205496868152600f8252604081208054841015612cac575b815220015493600052600f602052604060002090565b611c7e565b90549060031b1c90565b612cb4611c67565b612c87565b612cc1611c67565b612c6156fea26469706673582212205e8e8b74c560471054153d413cf548d87d08c4629780e2d36bdf4c6c20447d5064736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146102a757806306fdde031461029e578063081812fc14610295578063095ea7b31461028c57806318160ddd1461028357806323b872dd1461027a5780632bf19156146102715780632f745c59146102685780632ff78f9e1461025f57806342842e0e146102565780634f6ccce71461024d5780635af545dc146102445780635e3ec0761461023b57806360f42613146102325780636352211e1461022957806366d003ac146102205780636ef0517a1461021757806370a082311461020e578063715018a6146102055780637165485d146101fc5780637d518532146101f3578063815ef883146101ea5780638da5cb5b146101e157806395d89b41146101d8578063a035b1fe146101cf578063a22cb465146101c6578063a2d6c6da146101bd578063a4d66daf146101b4578063b88d4fde146101ab578063c87b56dd146101a2578063e985e9c514610199578063eb93406b146101905763f2fde38b1461018857600080fd5b61000e611339565b5061000e611144565b5061000e6110e6565b5061000e610ebe565b5061000e610e35565b5061000e610d53565b5061000e610d1f565b5061000e610c36565b5061000e610c17565b5061000e610b55565b5061000e610b2b565b5061000e610a6f565b5061000e610a42565b5061000e610a24565b5061000e6109bf565b5061000e610993565b5061000e610966565b5061000e610936565b5061000e610917565b5061000e6108e5565b5061000e6108b8565b5061000e61088b565b5061000e6107df565b5061000e610798565b5061000e61076b565b5061000e6106b7565b5061000e61068a565b5061000e610660565b5061000e61060c565b5061000e61051c565b5061000e6104bf565b5061000e6103b9565b5061000e6102c2565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356102e2816102b0565b63ffffffff60e01b1663780e9d6360e01b8114908115610308575b506040519015158152f35b6380ac58cd60e01b81149150811561033a575b8115610329575b50386102fd565b6301ffc9a760e01b14905038610322565b635b5e139f60e01b8114915061031b565b918091926000905b82821061036b575011610364575050565b6000910152565b91508060209183015181860152018291610353565b906020916103998151809281855285808601910161034b565b601f01601f1916010190565b9060206103b6928181520190610380565b90565b503461000e576000806003193601126104bc57604051908080549060019180831c928082169283156104b2575b602092838610851461049e578588526020880194908115610482575060011461042a575b6104268761041a81890382610dcb565b604051918291826103a5565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b838610610471575050509101905061041a82610426388061040a565b805485870152948201948101610455565b60ff1916855250505001915061041a905082610426388061040a565b634e487b7160e01b82526022600452602482fd5b93607f16936103e6565b80fd5b503461000e57602036600319011261000e5760206104de6004356115c6565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576105366104f0565b602435610542816114e1565b916001600160a01b0380841690821681146105bd576105749361056f913314908115610576575b50611559565b611abb565b005b6001600160a01b031660009081526005602052604090206105b791506105b09033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b38610569565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e576020600854604051908152f35b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576105746106723661062b565b91610685610680843361177a565b611649565b61191e565b503461000e57602036600319011261000e5760043560005260106020526020604060002054604051908152f35b503461000e57604036600319011261000e576106d16104f0565b602435906106de81611469565b821015610712576001600160a01b031660009081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b503461000e57604036600319011261000e5760043560005260116020526024356040600020556000604051f35b503461000e576105746107aa3661062b565b9060405192602084018481106001600160401b038211176107d2575b604052600084526116c2565b6107da610d71565b6107c6565b503461000e57602036600319011261000e576004356008548110156108315760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b503461000e57602036600319011261000e5760043560005260116020526020604060002054604051908152f35b503461000e57604036600319011261000e5760043560005260106020526024356040600020556000604051f35b503461000e57602036600319011261000e576060610904600435612c3e565b9060405192835260208301526040820152f35b503461000e57602036600319011261000e5760206104de6004356114e1565b503461000e57600036600319011261000e5760206040517354179e1770a780f2f541f23cb21252de12977d3c8152f35b503461000e57604036600319011261000e57600435600052600e6020526024356040600020556000604051f35b503461000e57602036600319011261000e5760206109b76109b26104f0565b611469565b604051908152f35b503461000e576000806003193601126104bc57600a546001600160a01b038116906109eb3383146113d0565b6001600160a01b031916600a556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760206040516103ea8152f35b503461000e57602036600319011261000e57600435600052600e6020526020604060002054604051908152f35b503461000e57608036600319011261000e57600435610a95610a908261175d565b612203565b600090808252600f60205260408220805415610b1e575b82526024356020832055808252600f60205260408220805460011015610b11575b825260443560016020842001558152600f602052610b0c610af060408320611c7e565b6064359082549060031b600019811b9283911b16911916179055565b604051f35b610b19611c67565b610acd565b610b26611c67565b610aac565b503461000e57600036600319011261000e57600a546040516001600160a01b039091168152602090f35b503461000e576000806003193601126104bc576040519080600190815480831c92808216928315610c0d575b602092838610851461049e5785885260208801949081156104825750600114610bb4576104268761041a81890382610dcb565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610bfc575050509101905061041a82610426388061040a565b805485870152948201948101610be0565b93607f1693610b81565b503461000e57600036600319011261000e576020600d54604051908152f35b503461000e57604036600319011261000e57610c506104f0565b602435801515810361000e576001600160a01b03821691338314610cde5781610c9b610cac9233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606490fd5b503461000e57602036600319011261000e57610426610d3f600435612781565b604051918291602083526020830190610380565b503461000e57600036600319011261000e576020604051610e908152f35b50634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117610da357604052565b610dab610d71565b604052565b604081019081106001600160401b03821117610da357604052565b90601f801991011681019081106001600160401b03821117610da357604052565b60405190606082018281106001600160401b03821117610da357604052565b6020906001600160401b038111610e28575b601f01601f19160190565b610e30610d71565b610e1d565b503461000e57608036600319011261000e57610e4f6104f0565b610e57610506565b606435916001600160401b03831161000e573660238401121561000e57826004013591610e8383610e0b565b92610e916040519485610dcb565b808452366024828701011161000e57602081600092602461057498018388013785010152604435916116c2565b503461000e57602036600319011261000e57600435610edc8161175d565b610ee590612203565b610eee816122f6565b60405165536f636b202360d01b60208201529190829060268201610f1191612238565b0391601f19928381018252610f269082610dcb565b610f2e61224b565b50610f388261261d565b610f4190612534565b6040519260008452610f5284610d88565b610f5b816122f6565b90610f65906114e1565b610f77906001600160a01b0316612408565b604051683d913730b6b2911d1160b91b602082015294859491929160298601610f9f91612238565b701116113232b9b1b934b83a34b7b7111d1160791b8152601101610fc291612238565b7f222c2265787465726e616c5f75726c223a2268747470733a2f2f74686973736f81526d636b732e636f6d2f746f6b656e2f60901b6020820152602e0161100891612238565b6b1116101137bbb732b9111d1160a11b8152600c0161102691612238565b6b11161134b6b0b3b2911d101160a11b8152600c017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0161106a91612238565b61227d60f01b81526002010382810182526110859082610dcb565b61108e90612534565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d82016110c891612238565b0390810182526110d89082610dcb565b6040516104268192826103a5565b503461000e57604036600319011261000e57602060ff6111386111076104f0565b61110f610506565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b506000806003193601126104bc5761042690611163600c544210611f87565b61118d611188611180600d5461117b81341015611fc2565b611ffb565b6103e8900490565b600d55565b61119b6001600b5401600b55565b611329600b54916111ac83336120ec565b6112e96111b8436118c5565b60408051602081018781529240918101919091526bffffffffffffffffffffffff1933606090811b82168184015230901b16607482015261120681608881015b03601f198101835282610dcb565b51902061122081601460ff9160051a8281831b1617061690565b61123486600052600e602052604060002090565b556112aa611240610dec565b61125783600c60ff9160011a8281831b1617061690565b815261127083600c60ff9160081a8281831b1617061690565b602082015261128c83600c60ff9160141a8281831b1617061690565b60408201526112a587600052600f602052604060002090565b612043565b6112c181600b60ff91601b1a8281831b1617061690565b6112d5866000526010602052604060002090565b55601f60ff9160141a8281831b1617061690565b6112fd846000526011602052604060002090565b558080604051347354179e1770a780f2f541f23cb21252de12977d3c5af1611323611b74565b506120af565b6040519081529081906020820190565b503461000e57602036600319011261000e576113536104f0565b600a546001600160a01b039061136c90821633146113d0565b81161561137c576105749061141b565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b156113d757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600a80546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3565b6001600160a01b0316801561148957600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b6000908152600260205260409020546001600160a01b031680156115025790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b1561156057565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608490fd5b6115cf8161175d565b156115ef576000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561165057565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608490fd5b604051906116bc82610d88565b60008252565b906116e69392916116d6610680843361177a565b6116e183838361191e565b611ba4565b156116ed57565b60405162461bcd60e51b8152806117066004820161170a565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6000908152600260205260409020546001600160a01b0316151590565b6117838261175d565b156117fc57611791826114e1565b6001600160a01b0382811682821681149490919085156117e4575b50505082156117ba57505090565b6001600160a01b0316600090815260056020526040902060ff92506117df9190610599565b541690565b6117f191929395506115c6565b1614913880806117ac565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561185d57565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b600181106118d5575b6000190190565b6118dd6118ae565b6118ce565b60019060011981116118f2570190565b6118fa6118ae565b0190565b60029060021981116118f2570190565b60209060201981116118f2570190565b90611928836114e1565b6001600160a01b038381169290918216839003611a0e576119826119e592821694611954861515611856565b61195f878483611cd4565b61196887611a65565b6001600160a01b0316600090815260036020526040902090565b61198c81546118c5565b90556001600160a01b03811660009081526003602052604090206119b081546118e2565b90556119c6856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03611a92836114e1565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380611af4846114e1565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e57516103b6816102b0565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526103b692910190610380565b506040513d6000823e3d90fd5b3d15611b9f573d90611b8582610e0b565b91611b936040519384610dcb565b82523d6000602084013e565b606090565b92909190823b15611c5e57611bd7926020926000604051809681958294630a85bd0160e11b9a8b85523360048601611b36565b03926001600160a01b03165af160009181611c2e575b50611c2057611bfa611b74565b80519081611c1b5760405162461bcd60e51b8152806117066004820161170a565b602001fd5b6001600160e01b0319161490565b611c5091925060203d8111611c57575b611c488183610dcb565b810190611b21565b9038611bed565b503d611c3e565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b805460021015611c9a575b600052600260206000200190600090565b611ca2611c67565b611c89565b90611cb181611e31565b6001600160a01b038216611ccb57611cc99150611ea5565b565b611cc991611df9565b9091906001600160a01b038082169182611d0e5750611cf283611e31565b831680611d05575050611cc99150611ea5565b03611ccb575050565b8185168303611d1e575b50611cf2565b611d92611d2a82611469565b60018110611dec575b60001901611d8360009387855260076020526040852054838103611d99575b5084611d68896000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b90600052602052604060002090565b5538611d18565b878652600660205260408620848752602052611de5604087205480611dd484611d838760018060a01b03166000526006602052604060002090565b556000526007602052604060002090565b5538611d52565b611df46118ae565b611d33565b604090611e0581611469565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055600160401b811015611e98575b6001810180600855811015611e8b575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611e93611c67565b611e61565b611ea0610d71565b611e51565b6008611f1b81549260018410611f7a575b600091818392835260096020526040832054611f0a60001997808981011015611f6d575b87865288816020882001015490831015611f60575b87865280836020882001556000526009602052604060002090565b556000526009602052604060002090565b558154928315611f4c578084019380851015611f3f575b8383526020832001015555565b611f47611c67565b611f32565b634e487b7160e01b82526031600452602482fd5b611f68611c67565b611eef565b611f75611c67565b611eda565b611f826118ae565b611eb6565b15611f8e57565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15611fc957565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b6103ea908060001904821181151516612012570290565b61201a6118ae565b0290565b6001600160fe1b038111600116612036575b60021b90565b61203e6118ae565b612030565b805491600392838355808410612086575b50906000526020806000206000925b848410612071575050505050565b60018382829351855501920193019290612063565b6000838152846020822092830192015b8281106120a4575050612054565b818155600101612096565b156120b657565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b6001600160a01b0381169081156121bf576121068361175d565b61217a57806121188461215093611ca7565b6001600160a01b038116600090815260036020526040902061213a81546118e2565b90556119c6846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b1561220a57565b60405162461bcd60e51b815260206004820152600660248201526508595e1a5cdd60d21b6044820152606490fd5b906118fa6020928281519485920161034b565b6040519061225882610db0565b6004825263536f636b60e01b6020830152565b60405190606082018281106001600160401b03821117612298575b604052602a8252604082602036910137565b6122a0610d71565b612286565b906122af82610e0b565b6122bc6040519182610dcb565b82815280926122cd601f1991610e0b565b0190602036910137565b9060209180518210156122e957010190565b6122f1611c67565b010190565b8015612392576000818181805b6123685750612311816122a5565b935b61231d5750505090565b612326906118c5565b90600a9060308282068019821161235b575b0160f81b6001600160f81b031916841a61235284876122d7565b53049081612313565b6123636118ae565b612338565b91506001600a916000198114612385575b01910480849291612303565b61238d6118ae565b612379565b5060405161239f81610db0565b60018152600360fc1b602082015290565b80156118d5576000190190565b156123c457565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b61241061226b565b908151156124aa575b60306020830153815160019081101561249d575b90607860218401536029915b80831161244c57506103b69150156123bd565b9080600f61248992166010811015612490575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a61247f85876122d7565b5360041c926123b0565b9190612439565b612498611c67565b61245f565b6124a5611c67565b61242d565b6124b2611c67565b612419565b60405190606082018281106001600160401b03821117612527575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b61252f610d71565b6124d2565b805115612614576125436124b7565b61255f61255a61255384516118fe565b6003900490565b61201e565b9161257161256c8461190e565b6122a5565b92835280815182019060208501935b8282106125c2575050506003905106806001146125b1576002146125a2575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190612580565b506103b66116af565b61262690612781565b6103b6608160405180937f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208301527f30302f737667222077696474683d223130383022206865696768743d2231303860408301527f30222076696577426f783d2230203020313038302031303830223e000000000060608301526126b6815180926020607b8601910161034b565b8101651e17b9bb339f60d11b607b820152036061810184520182610dcb565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e57805161270781610e0b565b926127156040519485610dcb565b8184526020828401011161000e576103b6916020808501910161034b565b6040906103b6939281528160208201520190610380565b91612773906127656103b69593606086526060860190610380565b908482036020860152610380565b916040818403910152610380565b6103b6612a1e9161282f61279482612c3e565b936127ac819392936000526011602052604060002090565b5473__$3f7f5b7df15ab580dadf91562e33ac998f$__6127d6836000526010602052604060002090565b5460409384519663749e421b60e01b88526000888181819b6128016004988983019190602083019252565b0381895af4908115612c31575b8291612c17575b508751809b819263132ffe9960e31b835289888401612733565b0381875af4988915612c0a575b8899612bd4575b509287926129a097959287956111f89b9c612959995198630f500e3b60e41b8a52878a806128788a8983019190602083019252565b0381895af4998a15612bc7575b889a612b99575b50916128fe898961292994819673__$1a9ce43643d07b5d2d447f788b54f84bee$__958a8551958587806128d26313f89b4360e31b978883528683019190602083019252565b03818c5af4968715612b8c575b8697612b6a575b50518381529081019182529584918791829160200190565b0381895af4948515612b5d575b8395612b41575b508d51968792839283528b83019190602083019252565b0381865af4938415612b34575b8594612b18575b508a51635a8289c960e01b81529c8d94859384938a850161274a565b03915af4978815612b0b575b8598612ae9575b506129828591600052600e602052604060002090565b548651809a8192630c0d0b6560e41b83528583019190602083019252565b038173__$4ad56025fb884537efa8d274801f471753$__5af4978815612adc575b8498612ab6575b50845163c9e3104760e01b81529081019283529291839190829081906020015b03915af4958615612aa9575b8096612a69575b5050612a5992612a53612a539593612a53612a5394519c8d9b60208d0190612238565b7f3c67207472616e73666f726d3d227472616e736c617465283138302c2031333081526214911f60e91b602082015260230190565b90612238565b631e17b39f60e11b815260040190565b612a53929650612a539593612a53612a9a612a599794612a53943d8091833e612a928183610dcb565b8101906126d5565b989450509395508194506129fb565b612ab1611b67565b6129f4565b6129e8949392919850612ad2903d8086833e612a928183610dcb565b97909192936129c8565b612ae4611b67565b6129c1565b85919850612b03612982913d8085833e612a928183610dcb565b98915061296c565b612b13611b67565b612965565b612b2d9194503d8087833e612a928183610dcb565b923861293d565b612b3c611b67565b612936565b612b569195503d8085833e612a928183610dcb565b9338612912565b612b65611b67565b61290b565b869392919750612b83903d8086833e612a928183610dcb565b969091926128e6565b612b94611b67565b6128df565b8893919a50898461292994612bba6128fe943d8085833e612a928183610dcb565b9d9496509450505061288c565b612bcf611b67565b612885565b6111f89950926129a0979592612959979592612bfa8b963d8089833e612a928183610dcb565b9b50929597509295975092612843565b612c12611b67565b61283c565b612c2b91503d8084833e612a928183610dcb565b38612815565b612c39611b67565b61280e565b612c4a610a908261175d565b600091818352600f60205260408320805415612cb9575b8352612ca2612c9d600160208087205496868152600f8252604081208054841015612cac575b815220015493600052600f602052604060002090565b611c7e565b90549060031b1c90565b612cb4611c67565b612c87565b612cc1611c67565b612c6156fea26469706673582212205e8e8b74c560471054153d413cf548d87d08c4629780e2d36bdf4c6c20447d5064736f6c634300080d0033",
  "libraries": {
    "SockLayoutLibrary": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "SockBackgroundLibrary": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "SockPinLibrary": "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
    "StyleLibrary": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1084,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1088,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1091,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1095,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3186,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)1790_storage"
      },
      {
        "astId": 3192,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "mintDeadline",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3207,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "price",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3211,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "tokenPin",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3216,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockColors",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3220,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockBackgroundColor",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3224,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockBackgroundType",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1790_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1789,
            "contract": "contracts/ThisSocks.sol:ThisSocks",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}